<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog</title>
  <subtitle>Thinking more.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.cyprestar.com/"/>
  <updated>2016-10-14T05:13:58.138Z</updated>
  <id>http://www.cyprestar.com/</id>
  
  <author>
    <name>Zhilong</name>
    <email>thesharing@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何快速掌握Markdown语法？</title>
    <link href="http://www.cyprestar.com/2016/10/14/How-to-write-Markdown/"/>
    <id>http://www.cyprestar.com/2016/10/14/How-to-write-Markdown/</id>
    <published>2016-10-14T03:25:25.000Z</published>
    <updated>2016-10-14T05:13:58.138Z</updated>
    
    <content type="html"><![CDATA[
Markdown 是一种轻量级标记语言。

它允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML(或者HTML)文档。

这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。

掌握Markdown语法的基本语法，只需要十点就够了。

<a id="more"></a>

Q: 有哪些网站可以用来写Markdown呢？

A: [Github](http://www.github.com/)、[简书](http://www.jianshu.com/)都支持Markdown，Github中可以一边写Markdown一边预览。

Q: 有哪些Markdown编辑器呢？

A: 近似全能的新兴编辑器[Visual Studio Code](https://code.visualstudio.com/)、MarkdownPad都可以用来写Markdown，你可以用他们来进行练习。

在[Gist](gist.github.com)中，用Github账号登录以后即可建立一个Gist（可以理解为文章），在里面编辑Markdown文档可以直接点击Preview查看效果。

在Visual Studio Code中新建一个Markdown文档（即新建文档 -> 另存为 文件名.md），在编辑时点击右上角预览按钮可以实时预览效果。

## 目录

* [一、段落和换行](#一、段落和换行)
* [二、标题](#二、标题)
* [三、列表](#三、列表)
* [四、链接](#四、链接)
* [五、图片](#五、图片)
* [六、粗体和斜体](#六、粗体和斜体)
* [七、代码](#七、代码)
* [八、引用](#八、引用)
* [九、反斜杠](#九、反斜杠（转义字符）)
* [十、分割线](#十、分割线)
* [Tips](#Tips)

## 一、段落和换行

在Markdown里，一个换行不会另起一行，只有两个（及以上）的换行会另起一行。这是为了保证书写格式的整齐。

每一行的行首不能有空格和缩进。

## 二、标题

用 \# 来标记标题，\# 越多，标题级别越小。\# 后面要有一个空格，表明这个#是标题的意思。

<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="section"># Head 1</span></div><div class="line"><span class="section">## Head 2</span></div><div class="line"><span class="section">### Head 3</span></div><div class="line"><span class="section">#### Head 4</span></div><div class="line"><span class="section">##### Head 5</span></div></pre></td></tr></table></figure>

# Head 1
## Head 2
### Head 3
#### Head 4
##### Head 5

## 三、列表

用 \* 来标记无序列表的项目，\* 后面要有空格，缩进可以调整项目级别。

<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">* </span>Item 1</div><div class="line"><span class="bullet">* </span>Item 2</div><div class="line"><span class="bullet">* </span>Item 3</div><div class="line"><span class="code">	* Item 3.1</span></div><div class="line"><span class="code">	* Item 3.2</span></div></pre></td></tr></table></figure>

* Item 1
* Item 2
* Item 3
	* Item 3.1
	* Item 3.2

用 1.、2.、3.（数字后面加一个点）标记有序列表的项目，标号后面要有空格。

<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">1. </span>Item 1</div><div class="line"><span class="bullet">2. </span>Item 2</div><div class="line"><span class="bullet">3. </span>Item 3</div><div class="line"><span class="bullet">4. </span>Item 4</div></pre></td></tr></table></figure>

1. Item 1
2. Item 2
3. Item 3
4. Item 4

## 四、链接
用方括号和圆括号表示链接。方括号括起 网址的标题或描述， 圆括号括起 网址。
就像这样：

<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="string">弹幕派</span>](<span class="link">www.danmakupie.com</span>)</div></pre></td></tr></table></figure>

[弹幕派](www.danmakupie.com)

## 五、图片

图片和链接比较像，只不过图片要在前面加一个感叹号（\!），方括号括起 图片的标题或描述，圆括号括起图片地址。

<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![<span class="string">弹幕派Logo</span>](<span class="link">http://7xr64j.com1.z0.glb.clouddn.com/blog/howtowritemarkdown/danmakupie-logo.png</span>)</div></pre></td></tr></table></figure>

![弹幕派Logo](http://7xr64j.com1.z0.glb.clouddn.com/blog/howtowritemarkdown/danmakupie-logo.png)

## 六、粗体和斜体

用`**`和`*`分别标记粗体和斜体。

<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="strong">**粗体**</span>  <span class="emphasis">*斜体*</span></div></pre></td></tr></table></figure>

**粗体** *斜体*

## 七、代码

代码分为两种，一种是大段文字里掺杂一些代码，用\`（键盘左上角的反引号）标记。

<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">在写C语言之前，要引入<span class="code">`#include &lt;stdio.h&gt;`</span>才能正常编译。</div></pre></td></tr></table></figure>

在写C语言之前，要引入`#include <stdio.h>`才能正常编译。

另外一种是大块代码，用三个\`（反引号）标记。


\`\`\`
#include <stdio.h>
        
int main(void){
return 0;
}
\`\`\`

<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

我们还可以将代码行都缩进一个Tab，从而将这些行标记为代码（这也就是为什么不要在普通文字前面缩进）。

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[Tab]   #include &lt;stdio.h&gt;</div><div class="line">[Tab]	</div><div class="line">[Tab]	int main(void)&#123;</div><div class="line">[Tab]	    return 0;</div><div class="line">[Tab]	&#125;</div></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

## 八、引用

有的时候我们需要标明一段话是引用自其他文章的，我们用>标记。

<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="quote">&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,</span></div><div class="line"><span class="quote">&gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.</span></div><div class="line"><span class="quote">&gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</span></div><div class="line"><span class="quote">&gt; </span></div><div class="line">&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse</div><div class="line"><span class="quote">&gt; id sem consectetuer libero luctus adipiscing.</span></div></pre></td></tr></table></figure>

> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
> consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
> Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.
> 
> Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
> id sem consectetuer libero luctus adipiscing.

## 九、反斜杠（转义字符）

上面可以看到，有很多字符都用来当标记符了。那么如果我们需要输入这些字符怎么办呢？
答案就是反斜杠，用反斜杠来转义这些字符。

<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">\<span class="emphasis">*literal asterisks\*</span></div></pre></td></tr></table></figure>

\*literal asterisks\*

Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">\   反斜线</div><div class="line">`   反引号</div><div class="line">*   星号</div><div class="line">_   底线</div><div class="line">&#123;&#125;  花括号</div><div class="line">[]  方括号</div><div class="line">()  括弧</div><div class="line">#   井字号</div><div class="line">+   加号</div><div class="line">-   减号</div><div class="line">.   英文句点</div><div class="line">!   惊叹号</div></pre></td></tr></table></figure>

## 十、分割线
在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。

<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">* </span><span class="bullet">* *</span></div><div class="line"></div><div class="line"><span class="emphasis">***</span></div><div class="line"></div><div class="line"><span class="strong">*****</span></div><div class="line"></div><div class="line"><span class="bullet">- </span>- -</div></pre></td></tr></table></figure>

***

## Tips:
	
### 1. 如果想要添加一个发送电子邮件的链接该怎么办？

<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="string">联系我们</span>](<span class="link">mailto:danmakupie@outlook.com</span>)</div></pre></td></tr></table></figure>

[联系我们](mailto:danmakupie@outlook.com)

<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="string">联系我们</span>](<span class="link">mailto:danmakupie@outlook.com?subject=弹幕派意见反馈</span>)</div></pre></td></tr></table></figure>

[联系我们](mailto:danmakupie@outlook.com?subject=弹幕派意见反馈)

### 2. 链接可以跳转到本页面的另一个地方吗？

在Github里是支持跳转到页面里的另一个标题的：
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="string">八、引用</span>](<span class="link">#八、引用</span>)</div></pre></td></tr></table></figure>

[八、引用](#八、引用)

这样就可以跳转到“八、引用”这个标题了。这可以用来做目录。

所有用#标记的标题都可以。GitHub对中文的支持不太好。

### 3. 参考式链接
一些链接可能要在文档里重复多次，每次都要写一遍链接太费事了。因此就有参考式链接。
参考式的链接是在链接文字的括号后面再接上另一个方括号，而在第二个方括号里面要填入用以辨识链接的标记：

<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">This is [<span class="string">an example</span>][<span class="symbol">1</span>] reference-style link.</div></pre></td></tr></table></figure>

接着，在文件的任意处，你可以把这个标记的链接内容定义出来：

<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="symbol">1</span>]: <span class="link">http://www.danmakupie.com "弹幕派"</span></div></pre></td></tr></table></figure>

This is [an example][1] reference-style link.

[1]: http://www.danmakupie.com "弹幕派"

### 4. 引用可以嵌套引用吗？
可以，通过多个>可以不断嵌套：

<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="quote">&gt; This is the first level of quoting.</span></div><div class="line"><span class="quote">&gt;</span></div><div class="line">&gt; &gt; This is nested blockquote.</div><div class="line"><span class="quote">&gt;</span></div><div class="line">&gt; Back to the first level.</div></pre></td></tr></table></figure>

> This is the first level of quoting.
>
> > This is nested blockquote.
>
> Back to the first level.

引用里还可以有其他标记：

<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="quote">&gt; ## 这是一个标题。</span></div><div class="line"><span class="quote">&gt; </span></div><div class="line">&gt; 1.   这是第一行列表项。</div><div class="line"><span class="quote">&gt; 2.   这是第二行列表项。</span></div><div class="line"><span class="quote">&gt; </span></div><div class="line">&gt; 给出一些例子代码：</div><div class="line"><span class="quote">&gt; </span></div><div class="line">&gt;     return shell_exec("echo $input | $markdown_script");</div></pre></td></tr></table></figure>

> ## 这是一个标题。
> 
> 1.   这是第一行列表项。
> 2.   这是第二行列表项。
> 
> 给出一些例子代码：
> 
>     return shell_exec("echo $input | $markdown_script");

### 5. 如何输入上标和下标？

用`<sub>`和`</sub>`包括下标文字：

<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">H&lt;sub&gt;2&lt;/sub&gt;O</div></pre></td></tr></table></figure>

H<sub>2</sub>O

用`<sup>`和`</sup>`包括上标文字：

<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">X&lt;sup&gt;2&lt;/sup&gt;+2x+1 = 0</div></pre></td></tr></table></figure>

X<sup>2</sup>+2x+1 = 0

### 6. 代码块如何进行语法高亮？

在\`\`\`之后加上语言的标记，例如：

\`\`\` c 可以标记C语言。

具体各语言高亮支持请查看[highlight.js - CSS classes reference](http://highlightjs.readthedocs.io/en/latest/css-classes-reference.html#language-names-and-aliases)

### 参考资料

[http://wowubuntu.com/markdown/](http://wowubuntu.com/markdown/)

### 延伸阅读

[Learning-Markdown (Markdown 入门参考)](http://itmyhome.com/markdown/index.html)

这里有讲怎么用Markdown画表格~~（虽然我从来没画出来过）~~。</stdio.h></stdio.h>]]></content>
    
    <summary type="html">
    
      Markdown 是一种轻量级标记语言。

它允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML(或者HTML)文档。

这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。

掌握Markdown语法的基本语法，只需要十点就够了。
    
    </summary>
    
      <category term="Web" scheme="http://www.cyprestar.com/categories/Web/"/>
    
    
      <category term="Markdown" scheme="http://www.cyprestar.com/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>浅谈BackgroundWorker的使用</title>
    <link href="http://www.cyprestar.com/2016/08/29/BackgroundWorker/"/>
    <id>http://www.cyprestar.com/2016/08/29/BackgroundWorker/</id>
    <published>2016-08-29T11:06:41.000Z</published>
    <updated>2016-08-29T16:23:17.824Z</updated>
    
    <content type="html"><![CDATA[这是弹幕派开发文档系列的第一篇！在开发[弹幕派](http://www.danmakupie.com)的过程中，通过网上的资料、MSDN学习到了很多WPF和C#的相关知识，在这里一并写出来，希望能够帮助到C#特别是WPF开发者。
弹幕派是我们开发的一个桌面弹幕小程序，说它小，但是它的开发周期可不短，在开发过程中学到了很多东西，今天我要说的便是第一个，如何运用后台进程连接网络。
<a id="more"></a>
## 浅谈BackgroundWorker在WPF中的使用

弹幕派在刚开始UI的渲染（即弹幕的产生和刷新）以及弹幕内容的获取都是在一个进程中完成的，这样导致一个问题就在于每当从网络获取数据时就会出现明显卡顿，如果网络失去连接就会导致程序假死无法继续进行。很明显这样是不行的，因此必须要引入多线程，通过后台线程获取数据，再将数据更新到UI中。

在WPF中，为了保证线程安全，Windows只允许创建UI元素的线程访问这些元素。如果在其他线程中尝试修改UI元素的属性，就会触发`STA错误`，导致程序崩溃。这样做是为了保证内容渲染的一致性。但是也会导致一个问题——我们无法通过后台线程直接修改UI元素的属性。WPF通过`Dispatcher`机制解决了这一问题。WPF为UI渲染设置了一个`Dispatcher`，这个`Dispatcher`我们可以理解为调度员，它与UI渲染相关的事件排成一个队列，按优先级对其队列中的元素进行排序，并且按序执行，这样可以保证UI在渲染时只执行一个任务，保证UI内容的一致性。如果我们的后台线程需要对界面元素的属性进行修改，可以请求UI线程代替它完成这一操作。那么如何请求UI线程帮忙呢？通过向`Dispatcher`注册工作项，将想要执行的任务加入队列，这个任务会在某个时间由`Dispatcher`完成，后台进程无需插手UI渲染。

![Dispatcher队列](https://i-msdn.sec.s-msft.com/dynimg/IC110371.jpeg)

[Dispatcher类](https://msdn.microsoft.com/zh-cn/library/system.windows.threading.dispatcher.aspx)提供两种调用方法，一种是`Invoke`同步调用，调用方必须等待UI进程完成这一任务才会返回并继续下面的操作；另一种是`BeginInvoke`异步调用，调用方在调用后会立即返回。
在弹幕派原有的代码中对这一部分有所使用。原本弹幕派刷新弹幕是通过每秒钟定时修改所有弹幕TextBlock的Margin属性的值达到移动弹幕的效果，那么在计时器[Timer](https://msdn.microsoft.com/zh-cn/library/system.timers.timer.aspx)的`Elapse`事件触发的函数中，如果直接修改这些Margin会触发STA错误。因此需要通过`BeginInvoke`来执行这一操作。

<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">delegate</span> <span class="keyword">void</span> <span class="title">DispatcherDelegateTimer</span>(<span class="params"></span>)</span>; <span class="comment">// 声明委托</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnTimedEvent</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.Dispatcher.BeginInvoke(DispatcherPriority.Normal, <span class="keyword">new</span> DispatcherDelegateTimer(UpdateUI)); <span class="comment">//通过BeginInvoke注册</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>

使用后台进程有三种方式，第一种是[Task](https://msdn.microsoft.com/zh-cn/library/system.threading.tasks.task.aspx)，第二种是[Thread](https://msdn.microsoft.com/zh-cn/library/system.threading.thread.aspx)，第三种就是我们今天要介绍的[BackgroundWorker](https://msdn.microsoft.com/zh-cn/library/system.componentmodel.backgroundworker.aspx)了。这三种方法各有千秋，但是`BackgroundWorker`更适合用于实现后台连接网络下载，因此在弹幕派的弹幕获取、自动更新等地方都主要使用了`BackgroundWorker`。

那么如何用`BackgroundWorker`实现后台连接网络获取数据呢？
首先我们需要引入命名空间

<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> System.ComponentModel;</div></pre></td></tr></table></figure>

之后我们需要添加`BackgroundWorker`组件，这一组件可以从Xaml界面添加——从工具箱中的“组件”选项卡中，添加`BackgroundWorker`组件；也可以在代码中声明：

<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> BackgroundWorker fetchBW = <span class="keyword">new</span> BackgroundWorker();</div></pre></td></tr></table></figure>

之后在初始化过程中设置`BackgroundWorker`的属性，可以在构造函数中，也可以在`Loaded`函数中。

<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">fetchBW.WorkerReportsProgress = <span class="literal">true</span>; <span class="comment">//是否报告工作进度</span></div><div class="line">fetchBW.WorkerSupportsCancellation = <span class="literal">true</span>; <span class="comment">//是否允许异步取消工作</span></div><div class="line">fetchBW.DoWork += <span class="keyword">new</span> DoWorkEventHandler(FetchBW_DoWork); <span class="comment">//这里声明要做的工作</span></div><div class="line">fetchBW.ProgressChanged += <span class="keyword">new</span> ProgressChangedEventHandler(FetchBW_ProgressChanged); <span class="comment">//当工作进度改变时更新界面</span></div><div class="line">fetchBW.RunWorkerCompleted += <span class="keyword">new</span> RunWorkerCompletedEventHandler(FetchBW_RunWorkerCompleted); <span class="comment">//当工作完成时处理工作结果</span></div></pre></td></tr></table></figure>

首先要设置是否报告工作进度，如果`WorkerReportsProgress`为true，则可以在`ProgressChanged`事件的函数中处理进度条等信息。当然Progress的数值要自行在`DoWork`函数中利用`ReportProgress`设置数值的变化（例如获取已经下载的进度并更新进度条）。

<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">backgroundWorker1_DoWork</span>(<span class="params"><span class="keyword">object</span> sender, DoWorkEventArgs e</span>)</span></div><div class="line">&#123;</div><div class="line">    BackgroundWorker worker = sender <span class="keyword">as</span> BackgroundWorker;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (worker.CancellationPending == <span class="literal">true</span>)</div><div class="line">        &#123;</div><div class="line">            e.Cancel = <span class="literal">true</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="comment">// Perform a time consuming operation and report progress.</span></div><div class="line">            System.Threading.Thread.Sleep(<span class="number">500</span>);</div><div class="line">            worker.ReportProgress(i * <span class="number">10</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">backgroundWorker1_ProgressChanged</span>(<span class="params"><span class="keyword">object</span> sender, ProgressChangedEventArgs e</span>)</span></div><div class="line">&#123;</div><div class="line">    resultLabel.Text = (e.ProgressPercentage.ToString() + <span class="string">"%"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>

如果允许异步取消（`WorkerSupportsCancellation = false`），则通过`CancelAsync`可以取消工作。此时`CancellationPending = true`。
之后再绑定`DoWork`、`ProgressChanged`、`RunWorkerCompleted`事件。`DoWork`里写明主要功能，同时需要回报进度和处理取消事件。`ProgressChanged`里根据进度处理事件（修改进度条等），`RunWorkerCompleted`事件处理`DoWork`的结果。

那么如何在`RunWorkerCompleted`中获取`DoWork`的结果呢？

<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">FetchBW_DoWork</span>(<span class="params">Object sender, DoWorkEventArgs e</span>) </span>&#123;</div><div class="line">    BackgroundWorker backgroundWorker = sender <span class="keyword">as</span> BackgroundWorker; <span class="comment">//sender即源BackgroundWorker</span></div><div class="line">        </div><div class="line">    <span class="comment">//......</span></div><div class="line"></div><div class="line">    <span class="comment">// 将获得的结果进行封装，然后将解析结果保存至e.Result中供RunWorkerCompleted使用</span></div><div class="line">    fetchedData result = <span class="keyword">new</span> fetchedData(num, contentList);</div><div class="line">    e.Result = result;</div><div class="line">    backgroundWorker.ReportProgress(<span class="number">100</span>); <span class="comment">// 当Dowork完成时直接将进度设为100%，触发RunWorkerCompleted事件</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">FetchBW_ProgressChanged</span>(<span class="params"><span class="keyword">object</span> sender, ProgressChangedEventArgs e</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">FetchBW_RunWorkerCompleted</span>(<span class="params"><span class="keyword">object</span> sender, RunWorkerCompletedEventArgs e</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (e.Cancelled == <span class="literal">false</span> &amp;&amp; e.Error == <span class="literal">null</span>) &#123;</div><div class="line">        fetchedData result = e.Result <span class="keyword">as</span> fetchedData;</div><div class="line">        danmuStorage.AddRange(result.contentList);</div><div class="line">        result.contentList.Clear();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        Debug.WriteLine(<span class="string">"获取时出现错误"</span>);</div><div class="line">    &#125;</div><div class="line">    bwTimer.Stop();</div><div class="line">&#125;</div></pre></td></tr></table></figure>

将结果保存至`DoWork`的`e.Result`中，之后可以在`RunWorkerCompleted`的`e.Result`中获取到结果。处理结果时要处理Cancelled（取消事件）和Error（错误事件）。
这里要注意的是，对于网络访问等操作来说，很有可能会出现网络连接中断导致超时，因此这个时候需要我们设置一个定时器，在开始处理事件前启动定时器，然后在定时器超时时调用`CancelAsync`即可。

`BackgroundWorker`不仅可以在WPF中调用，在WinForm中也可以。`BackgroundWorker`最适合的场景便是后台下载，通过`DoWork`、`ReportProgress`和`RunWorkerCompleted`三者分开，可以明确地划分执行工作、更新界面、处理结果三个部分，与定时器`Timer`和按钮`Button`结合使用还可以保证程序不会由于网络连接中断等原因一直卡住。

### 参考资料

[wpf 多线程](http://www.cnblogs.com/linlf03/archive/2011/09/01/2043139.html)

[线程处理模型](https://msdn.microsoft.com/zh-cn/library/ms741870.aspx)

[如何：使用后台辅助线程](https://msdn.microsoft.com/zh-cn/library/cc221403.aspx)

[如何：在后台下载文件](https://msdn.microsoft.com/zh-cn/library/ms229675.aspx)

[如何：在后台运行操作](https://msdn.microsoft.com/zh-cn/library/hybbz6ke.aspx)

[BackgroundWorker](https://msdn.microsoft.com/zh-cn/library/system.componentmodel.backgroundworker.aspx)

[Dispatcher类](https://msdn.microsoft.com/zh-cn/library/system.windows.threading.dispatcher.aspx)

[委托 delegate](https://msdn.microsoft.com/zh-cn/library/ms173171.aspx)]]></content>
    
    <summary type="html">
    
      这是弹幕派开发文档系列的第一篇！在开发[弹幕派](http://www.danmakupie.com)的过程中，通过网上的资料、MSDN学习到了很多WPF和C#的相关知识，在这里一并写出来，希望能够帮助到C#特别是WPF开发者。
弹幕派是我们开发的一个桌面弹幕小程序，说它小，但是它的开发周期可不短，在开发过程中学到了很多东西，今天我要说的便是第一个，如何运用后台进程连接网络。
    
    </summary>
    
      <category term="DanmakuPie" scheme="http://www.cyprestar.com/categories/DanmakuPie/"/>
    
    
      <category term="WPF" scheme="http://www.cyprestar.com/tags/WPF/"/>
    
  </entry>
  
  <entry>
    <title>用编程展现绘画之美</title>
    <link href="http://www.cyprestar.com/2016/04/30/BoP/"/>
    <id>http://www.cyprestar.com/2016/04/30/BoP/</id>
    <published>2016-04-30T15:59:41.000Z</published>
    <updated>2016-11-02T13:52:48.908Z</updated>
    
    <content type="html"><![CDATA[
一个想法——通过Coding来画画。

这篇文章用于参加2016编程之美设计赛。

<a id="more"></a>

## 用编程展现绘画之美

### 概述

我们都知道，编程可以帮助我们更好地去探索动听的旋律：

![用音乐编辑软件来合成动听的旋律](http://7xr64j.com1.z0.glb.clouddn.com//bop2016/pic1.jpg)

我们也知道，编程可以帮助我们更好地吟诗作对，探索语言的魅力：

![微软亚洲研究院的“律诗绝句”](http://7xr64j.com1.z0.glb.clouddn.com//bop2016/pic2.png)

那么，编程可以帮助我们更好地去一览色彩的神奇吗？

![星空-达芬奇](http://7xr64j.com1.z0.glb.clouddn.com//bop2016/pic3.jpg)

不妨和我一起试试，用Xaml语言来作一幅画吧。

### 教程

首先，打开Visual Studio 2020，然后选择`新建项目`，在“新建项目”的对话框中选择“绘画”，在这里我们把作品命名为 *Starry Night*

![新建绘画](http://7xr64j.com1.z0.glb.clouddn.com//bop2016/pic4.png)

在绘画之前，我们要准备好绘画用的材料以及想好自己想画的内容，跟着向导我们可以设定画的基本属性：

![初始化我们的画作](http://7xr64j.com1.z0.glb.clouddn.com//bop2016/pic5.png)

跟着向导完成初始化操作以后，我们可以看到接下来让我们挥洒灵感的地方：

![绘画工作区](http://7xr64j.com1.z0.glb.clouddn.com//bop2016/pic6.png)

而作品的标题、风格等信息已经定义好。

当然我们可以通过编写Xaml来绘画————例如，我们将画布涂上蓝色，再将整幅画按照黄金分割比例进行分隔：

![用Xaml来绘画](http://7xr64j.com1.z0.glb.clouddn.com//bop2016/pic8.png)

]]></content>
    
    <summary type="html">
    
      一个想法——通过Coding来画画。

这篇文章用于参加2016编程之美设计赛。
    
    </summary>
    
    
      <category term="编程之美2016" scheme="http://www.cyprestar.com/tags/%E7%BC%96%E7%A8%8B%E4%B9%8B%E7%BE%8E2016/"/>
    
  </entry>
  
  <entry>
    <title>用Hexo搭建一个Github个人Blog</title>
    <link href="http://www.cyprestar.com/2016/02/23/Build-a-Github-Blog-with-Hexo/"/>
    <id>http://www.cyprestar.com/2016/02/23/Build-a-Github-Blog-with-Hexo/</id>
    <published>2016-02-23T08:46:29.000Z</published>
    <updated>2016-10-14T04:42:48.786Z</updated>
    
    <content type="html"><![CDATA[不知道有没有人像我一样，想要建立个人主页，可是对Javescript和PHP都不了解。不过现在好了，基于开源的Hexo，只需1小时，即可在Github搭建一个简单又美观的个人主页，并在上面发表你的第一篇文章。那么，倒计时开始。
<a id="more"></a>
## 准备

- [Node.js](http://nodejs.org/)
- [Git](http://git-scm.com/)

#### 选装

- [Markdown Pad 2](http://markdownpad.com/) - Markdown编辑器
- [Visual Studio Code](https://code.visualstudio.com/) - Markdown编辑器

## 配置Git

首先在GitHub上[注册](https://github.com/signup/free)免费账号。接着在账户界面选择`+ New repository`，在`Repository Name`中填入`用户名.github.io`，选择`Public`，点击`Create Respository`创建一个目录。这个目录就是你的网站的存储空间。

![创建站点的存储空间](http://7xr64j.com1.z0.glb.clouddn.com/1.png)

接下来打开Git Bash，在Git Bash中输入

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd ~/. ssh</div></pre></td></tr></table></figure>

以检查本机的ssh密钥。如果提示：'No such file or directory 说明你是第一次使用Git。

生成新的SSH Key：

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C &quot;邮件地址@youremail.com&quot;	</div><div class="line">Generating public/private rsa key pair.</div><div class="line">Enter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):&lt;此处直接回车&gt;</div></pre></td></tr></table></figure>

这里邮箱地址要填入注册邮箱地址。

然后设置密码：

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Enter passphrase (empty for no passphrase):&lt;输入加密串&gt;</div><div class="line">Enter same passphrase again:&lt;再次输入加密串&gt;</div></pre></td></tr></table></figure>

在回车中会提示你输入一个密码，这个密码会在你提交项目时使用，如果为空的话提交项目时则不用输入。这个设置是防止别人往你的项目里提交内容。注意：输入密码的时候没有*字样的，你直接输入就可以了。

最后看到这样的界面，就成功设置SSH Key了：

![配置成功](http://7xr64j.com1.z0.glb.clouddn.com/2.png)

在本机设置SSH Key后，需要添加SSH Key到GitHub上，为之后的从本地向GitHub上提交网站做准备。

1. 用文本编辑器打开C:\Users\用户名\.ssh\id_rsa.pub，里面是刚才生成的密钥。
2. 登录GitHub，在右上角的头像选择Settings -> SSH Key -> New SSH Key，然后将文件中的内容拷贝至`Key`中即可。`Title`为这个SSH Key的名称，可以自定。

![SSH Keys](http://7xr64j.com1.z0.glb.clouddn.com/3.png)

测试设置结果：

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh -T git@github.com</div></pre></td></tr></table></figure>

如果得到如下反馈：

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">The authenticity of host &apos;github.com (207.97.227.239)&apos; can&apos;t be established.</div><div class="line">RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</div><div class="line">Are you sure you want to continue connecting (yes/no)?</div></pre></td></tr></table></figure>

此时输入`yes`即可。然后会看到：

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hi thesharing! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</div></pre></td></tr></table></figure>

说明SSH Key已经设置成功，这台设备的Git Bash已经可以访问你的GitHub了。

接下来需要设置登录信息：

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name &quot;你的用户名&quot;</div><div class="line">$ git config --global user.email  &quot;你的注册邮箱&quot;</div></pre></td></tr></table></figure>

到这一步，Git Bash就配置完毕了。

## Hexo安装

[Hexo](https://hexo.io) 是一个快速、简洁且高效的博客框架。在安装完以上的软件以后，在命令提示行中使用`npm`命令即可完成安装。

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g hexo-cli</div></pre></td></tr></table></figure>

可能会有网络错误，可以重新执行命令安装。

接下来执行

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install</div></pre></td></tr></table></figure>

以安装所需的依赖包。

## 部署Hexo

指定一个文件夹作为你的博客存放的文件夹，然后从此文件夹打开命令行，开始部署：

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo init</div></pre></td></tr></table></figure>

等待一段时间，Hexo会在这个文件夹下建立工作目录。现在本地博客已经建立完毕，执行以下命令：

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo generate</div><div class="line">hexo server</div></pre></td></tr></table></figure>

然后在浏览器中访问`localhost:4000`即可看到初始化的博客内容。

## 下载主题

在Hexo的官方网站[Themes | Hexo ](https://hexo.io/themes/)上有一些主题可供使用，在Hexo的GitHub主页[Themes - hexojs/hexo](https://github.com/hexojs/hexo/wiki/Themes)上提供了更多的主题链接可供下载。你可以选择用Git将主题`Clone`到本地，以获得主题的实时更新，也可以通过`Download Zip`将主题下载到本地的hexo文件夹/theme/使用。针对不同主题会有不同的设置项，一般主题的GitHub主页会提供Wiki来帮助设置主页。本次以PPOffice开发的Icarus为例进行主题方面的设置。

## 个性化你的博客

首先要配置你的站点信息，用Sublime Text等文本编辑器（不推荐使用记事本，存在一些格式上的问题）打开`hexo文件夹\_config.yml`开始配置。

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"># Site 站点信息设置</div><div class="line">title: Zhilong&apos;s Tech Blog # 站点标题</div><div class="line">subtitle: Have a try # 副标题</div><div class="line">description: Zhilong&apos;s personal blog on github # 给搜索引擎看的，对站点的描述，可以自定义</div><div class="line">author: Thesharing # 网站作者：在站点下方可以看到</div><div class="line">mail: thesharing@163.com# 你的联系邮箱</div><div class="line">language: zh-CN # 语言：简体中文</div><div class="line">	</div><div class="line"># URL</div><div class="line">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</div><div class="line">url: http://thesharing.github.io/ #站点地址</div><div class="line">root: / #站点的根目录</div><div class="line">permalink: :year/:month/:day/:title/ #文章默认存放位置的格式，这里表示目录结构为：year/month/day/title.md。</div><div class="line">tag_dir: tags # 标签页的文件夹位置</div><div class="line">archive_dir: archives # 归档页的文件夹位置</div><div class="line">category_dir: categories # 目录页的文件夹位置</div><div class="line">	</div><div class="line"># Writing 文章布局、写作格式的定义</div><div class="line">new_post_name: :title.md # 新文章的文章名，这里是用文章标题作为文件名</div><div class="line">default_layout: post # 默认的布局，详情查看https://hexo.io/zh-cn/docs/writing.html以获得更多信息</div><div class="line">auto_spacing: true # 是否在中文字符和英文字符之间自动添加空格</div><div class="line">titlecase: false # 是否将标题大写</div><div class="line">max_open_file: 100</div><div class="line">filename_case: 0</div><div class="line">highlight: #语法高亮</div><div class="line">  enable: true</div><div class="line">  backtick_code_block: true</div><div class="line">  line_number: true</div><div class="line">  tab_replace:</div><div class="line">	</div><div class="line"># 目录和标签</div><div class="line">default_category: uncategorized # 默认目录</div><div class="line">category_map:</div><div class="line">tag_map:</div><div class="line"></div><div class="line"># Archives 默认值为2，这里都修改为1，相应页面就只会列出标题，而非全文</div><div class="line">## 2: Enable pagination</div><div class="line">## 1: Disable pagination</div><div class="line">## 0: Fully Disable</div><div class="line">archive: 1</div><div class="line">category: 1</div><div class="line">tag: 1</div><div class="line"></div><div class="line"># Server 本地服务器信息</div><div class="line">## Hexo uses Connect as a server</div><div class="line">## You can customize the logger format as defined in</div><div class="line">## http://www.senchalabs.org/connect/logger.html</div><div class="line">port: 4000</div><div class="line">logger: false</div><div class="line">logger_format:</div><div class="line">	</div><div class="line"># Date / Time format 日期、时间格式</div><div class="line">## Hexo uses Moment.js to parse and display date</div><div class="line">## You can customize the date format as defined in</div><div class="line">## http://momentjs.com/docs/#/displaying/format/</div><div class="line">date_format: MMM D YYYY</div><div class="line">time_format: H:mm:ss</div><div class="line">	</div><div class="line"># Pagination 每页显示文章数，可以自定义</div><div class="line">## Set per_page to 0 to disable pagination</div><div class="line">per_page: 10</div><div class="line">pagination_dir: page</div><div class="line">	</div><div class="line"># Disqus Disqus插件设置</div><div class="line">disqus_shortname: thesharing # 这里填入讨论区名即可</div><div class="line">	</div><div class="line"># Extensions 配置站点所用主题和插件</div><div class="line">## Plugins: https://github.com/tommy351/hexo/wiki/Plugins</div><div class="line">## Themes: https://github.com/tommy351/hexo/wiki/Themes</div><div class="line">theme: icarus # 主题</div><div class="line">exclude_generator:</div><div class="line">plugins:</div><div class="line">- hexo-generator-feed</div><div class="line">- hexo-generator-sitemap</div><div class="line">	</div><div class="line"># Deployment 站点部署到github的设置</div><div class="line">## 官方文档：https://hexo.io/zh-cn/docs/deployment.html</div><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repository: https://github.com/thesharing/thesharing.github.io.git # Repository地址</div><div class="line">  branch: master</div></pre></td></tr></table></figure>

可以将其直接复制入你的`_config.yml`文件中使用。下面解释各项如何修改。

### Site

按照说明修改即可。

### URL

将url改为你的博客首地址，可以到[GoDaddy](https://www.godaddy.com/)上购买域名进行绑定，那么这里就应该改成你的域名而非GitHub.io地址。

### Writing - Pagination

均不必修改，如自定义请参考官方Doc进行修改。

### Theme 

将Theme修改为你下载的主题的主题名，要注意，`theme`文件夹下的主题文件夹也要对应名称。

### Deploy

将`repository`改为https://github.com/你的用户名/你的用户名.github.io.git，`branch`不变。

此时第一个配置文件设置结束，我们打开第二个，主题的配置文件来配置主题样式。这里以我使用的Icarus为例：`hexo文件夹\themes\icarus\_config.yml`

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"># Menus</div><div class="line">menu:</div><div class="line">  首页: .</div><div class="line">  归档: archives</div><div class="line">  关于: about</div><div class="line">	</div><div class="line"># Customize</div><div class="line">customize:</div><div class="line">    logo:</div><div class="line">        enabled: true</div><div class="line">        width: 40</div><div class="line">        height: 40</div><div class="line">        url: images/logo.png</div><div class="line">    profile:</div><div class="line">        enabled: true # Whether to show profile bar</div><div class="line">        avatar: css/images/avatar.png</div><div class="line">        gravatar: # Gravatar email address, if you enable Gravatar, your avatar config will be overriden</div><div class="line">        author: Zhilong</div><div class="line">        author_title: A CS Student</div><div class="line">        location: 北京, 中国</div><div class="line">        follow: http://weibo.com/sharinginworld/</div><div class="line">    highlight: monokai</div><div class="line">    sidebar: left # sidebar position, options: left, right</div><div class="line">    thumbnail: false # enable posts thumbnail, options: true, false</div><div class="line">    favicon: css/images/favicon.png # path to favicon</div><div class="line">    social_links:</div><div class="line">        github: http://github.com/thesharing/</div><div class="line">        twitter: http://twitter.com/cyprestar/</div><div class="line">        facebook: https://www.facebook.com/cyprestar/</div><div class="line">        linkedin: https://www.linkedin.com/in/%E5%BF%97%E9%BE%99-%E6%B4%AA-964252a6/</div><div class="line">        steam: http://steamcommunity.com/profiles/76561198136146683/</div><div class="line">        weibo: http://weibo.com/sharinginworld/</div><div class="line">	</div><div class="line"># Widgets</div><div class="line">widgets:</div><div class="line">    - recent_posts</div><div class="line">    - category</div><div class="line">    - archive</div><div class="line">    - tag</div><div class="line">    - tagcloud</div><div class="line">    - links</div><div class="line">	</div><div class="line"># Search</div><div class="line">search:</div><div class="line">    swiftype: # enter swiftype install key here</div><div class="line">    baidu: true # you need to disable other search engines to use Baidu search, options: true, false</div><div class="line"></div><div class="line"># Comment</div><div class="line">comment:</div><div class="line">    disqus: thesharing # enter disqus shortname here</div><div class="line">    duoshuo: # enter duoshuo shortname here</div><div class="line">    youyan: # enter youyan uid here</div><div class="line"></div><div class="line"># Share</div><div class="line">share: default # options: jiathis, bdshare, addtoany, default</div><div class="line"></div><div class="line"># Plugins</div><div class="line">plugins:</div><div class="line">    fancybox: true # options: true, false</div><div class="line">    google_analytics: UA-74183669-1 # enter the tracking ID for your Google Analytics</div><div class="line">    google_site_verification: # enter Google site verification code</div><div class="line">    baidu_analytics: 631ec0463314a38fa28346d593dadbed # enter Baidu Analytics hash key</div><div class="line"></div><div class="line"># Miscellaneous</div><div class="line">miscellaneous:</div><div class="line">    open_graph: # see http://ogp.me</div><div class="line">        fb_app_id:</div><div class="line">        fb_admins:</div><div class="line">        twitter_id:</div><div class="line">        google_plus:</div><div class="line">    links:</div><div class="line">        Github: http://github.com/thesharing/</div></pre></td></tr></table></figure>

### 可配置项

- 在配置中按照`页面名: 页面目录`的格式可以自行添加页面。
- `logo`中可以设置Logo以及Logo大小。建议直接替换而非自定目录。
- `avatar`中设置资料页的头像，`author`为作者名，`author_title`为作者介绍，`location`为地区，`follow`为“关注我”指向的地址。
- `highlight`为语法高亮的主题
- `sidebar`为资料页的位置（左、右）
- `thumbnail`设置是否显示缩略图
- `favicon`设置网站图标
- `social_links`设置社交图标
- `comment`设置评论系统，`disqus`后填入论坛名即可
- `plugin`中设置谷歌站长分析等插件信息

### Disqus

事实上Disqus在国内并不好用，载入速度有点慢。网上有人推荐“多说”，不过我还是用Disqus。进入[Disqus](https://disqus.com/)完成注册以后，点击右上角的“设置”，选择“Add Disqus To Site”，然后按照向导进行设置即可。这里要注意，`Disqus URL`中填写的就是上面设置文件中要填写的论坛名。

![Disqus 设置](http://7xr64j.com1.z0.glb.clouddn.com/4.png)

![Disqus 设置](http://7xr64j.com1.z0.glb.clouddn.com/5.png)

### 生成并预览

设置完成后，在hexo文件夹下打开命令行输入

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo generate</div><div class="line">hexo server</div></pre></td></tr></table></figure>

如果运行成功，那么输入`localhost:4000`即可打开你的个人主页。

## 部署你的Blog

之前我们一直在本地运行，接下来我们要把这个个人主页部署到GitHub上去。在每一次对设置的修改以及写文章之后都要用`hexo generate`命令重新生成一次。然后右击hexo文件夹，选择`Git Bash Here`，打开Git Bash，在Git Bash中输入

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>

等待安装完成以后，再执行：

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>

有可能会提示输入邮箱和密码，按照之前设置的输入即可。如果失败可能是网络问题，重新尝试一下。

提示成功以后可以在你的GitHub的该Repository下看到Commit成功+1，说明服务器已经接受了你的提交，一般等待3-5分钟以后，你的Blog便会被刷新。此时用`你的用户名.github.io`即可访问到你的Blog，怎么样，是不是很Coooool？

## 写文章

那么说了这么多，个人主页已经建好，接下来就是充实内容了。内容怎么充实呢？写文章咯。

在hexo文件夹下打开命令行，输入：

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new [layout] &lt;title&gt;</div></pre></td></tr></table></figure>

这里`[layout]`是指你所用的模板名称，所有模板都在`hexo\scaffolds\`文件夹下存放，关于模板的更多信息，请访问[官方Doc](https://hexo.io/zh-cn/docs/writing.html)，里面有很详尽的解释。

`title`则是文章的标题，可以为中文。 在执行完命令后，到`hexo\source\_posts\`文件夹下可以找到生成的Markdown文件。用MarkdownPad 2或者Visual Studio Code打开Markdown文件即可开始书写你的文章，正如我现在所做。至于[Markdown文法](https://gist.github.com/Thesharing/5e5f5842ede0cb6d95d38ea39d9e0234)，又是一个大坑。

对于图片，我们需要将文章中要用到的图片上传至图床然后引用外链。图床是指存放图片的云存储空间，我个人正在使用的是[七牛](www.qiniu.com)，可以找一个适合自己的图床一直用下去。

在写完文章以后，再次`hexo generate`然后部署就可以了。

Markdown教程：[如何快速掌握Markdown语法？](http://thesharing.github.io/2016/10/14/How-to-write-Markdown/)

Hexo中支持的语法高亮：[highlight.js - CSS classes reference](http://highlightjs.readthedocs.io/en/latest/css-classes-reference.html#language-names-and-aliases)

## 推荐阅读 与 参考资料

[文档 | Hexo](https://hexo.io/zh-cn/docs/)

[Hexo系列教程 - 2](http://zipperary.com/2013/05/28/hexo-guide-2/)

[如何搭建一个独立博客——简明Github Pages与Hexo教程](http://www.jianshu.com/p/05289a4bc8b2)

[Hexo你的博客](http://ibruce.info/2013/11/22/hexo-your-blog/)

[Hexo的GitHub文档（英文）](https://github.com/hexojs/hexo/wiki/)

[Markdown 语法](https://gist.github.com/Thesharing/5e5f5842ede0cb6d95d38ea39d9e0234)

## 问题

1. Markdown Pad 2 无法正常预览怎么办？

	按照官网提示，安装[Awesomium 1.6.6 SDK](http://markdownpad.com/download/awesomium_v1.6.6_sdk_win.exe)以及[Microsoft's DirectX End-User Runtimes (June 2010)](http://www.microsoft.com/en-us/download/details.aspx?id=8109)以后可以解决。]]></content>
    
    <summary type="html">
    
      不知道有没有人像我一样，想要建立个人主页，可是对Javescript和PHP都不了解。不过现在好了，基于开源的Hexo，只需1小时，即可在Github搭建一个简单又美观的个人主页，并在上面发表你的第一篇文章。那么，倒计时开始。
    
    </summary>
    
      <category term="Web" scheme="http://www.cyprestar.com/categories/Web/"/>
    
    
      <category term="Hexo" scheme="http://www.cyprestar.com/tags/Hexo/"/>
    
  </entry>
  
</feed>
