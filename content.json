{"pages":[{"title":"关于","text":"ZhilongBachelor of Computer Science and Technology. TimeLine2016.12 参加 Hackathon Beijing 2016 2016.10 参加微软 Dev Asia 2016 黑客马拉松 - 三等奖 2016.08 参加微软学生夏令营 2016.05 “功夫道场”作为推荐项目参加校大学生创新实践实践展 2015.11 参加微软校园 Hackathon Now在写 DanmakuPie, 主写 C#, 还有一点 Python 和 JavaScript。 在追 Westworld, This is us, Modern Family, 2 Broken Girls, We Bare Bears。 在玩 Hearthstone, OverWatch 和 Crypt of the Necrodancer。 在玩 Ingress, 是 Resistance。 在看 一些奇奇怪怪的书，还有一堆技术书正在落灰。 热爱 《三体》和 The Song of Ice and Fire。","link":"/about/index.html"},{"title":"categories","text":"","link":"/categories/index.html"},{"title":"tags","text":"","link":"/tags/index.html"}],"posts":[{"title":"在Electron上实现始终置顶且可调整大小的二维码窗口","text":"弹幕派正在筹划使用Electron+Vue.js+Element来重构之前的桌面客户端，在重构过程中需要基于Electron的特性对之前的功能进行调整。其中要实现在弹幕窗口上显示一个始终置顶且可以手动调整大小以及移动位置，在实现过程中遇到一些问题并加以解决，在此进行分享。 在Electron上实现始终置顶且可调整大小的二维码窗口怎样展现二维码第一个问题，是怎样展现二维码。由于二维码叠加在弹幕窗口之上，因此有两种可选方案：一是在原有的弹幕窗口上添加一个Vue组件，将二维码展现上去即可；二是新建一个窗口，单独用于显示二维码。 第一种方案需要手动实现二维码的位置移动和大小调整，但是由于是随着弹幕窗口一起显示，开启和关闭状态的管理较为简单，同时由于在同一窗口内，二维码地址等参数传递方便；第二种方案需要新开一个窗口，因此需要手动管理窗口的状态，且参数传递需要通过主进程进行传递，实现复杂度有所提升，好处在于位置移动和大小调整使用原生实现即可。首先基于第一种方式进行了实现。 与弹幕在同一窗口显示二维码组件的实现整体较为简单，显示一张二维码图片即可。由于需要手动实现窗口的调整大小和关闭，因此添加两个按钮，分别对应关闭和调整大小，代码如下所示： 123456789101112131415161718192021222324252627282930313233343536&lt;template&gt; &lt;div id=&quot;QRCode&quot; :style=&quot;location&quot;&gt; &lt;el-button circle class=&quot;close&quot;&gt; &lt;font-awesome-icon icon=&quot;times&quot;/&gt; &lt;/el-button&gt; &lt;el-button circle class=&quot;resize&quot;&gt; &lt;font-awesome-icon icon=&quot;expand-arrows-alt&quot;/&gt; &lt;/el-button&gt; &lt;img :src=&quot;src&quot; alt=&quot;QRCode&quot; class=&quot;QRCode&quot; :height=&quot;size&quot; :width=&quot;size&quot;&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt; import {remote} from &apos;electron&apos; export default { name: &quot;QRCode&quot;, data() { return { size: Math.floor(document.body.clientHeight / 2), location: { top: `${Math.floor(document.body.clientHeight / 4)}px`, left: `${Math.floor(document.body.clientWidth / 2 - document.body.clientHeight / 4)}px` } } }, props: { display: { type: Boolean }, src: { type: String } } }&lt;/script&gt; 值得注意的是初始显示位置和大小需要手动计算。 调整z-index接下来调整CSS样式。原本弹幕窗口的属性已经是始终置顶，下一步所需要做的是保证二维码在弹幕上方显示即可，通过设置z-index大于弹幕层的z-index即可，并设置position属性保证z-index生效。紧接着调整两个按钮的样式，设置position: absolute同时设置top和right值使其固定位置，在组件大小调整时仍然保持在窗口右上角/右下角即可。为了避免窗口过小时按钮遮挡住二维码，设置二维码的padding为1.5em并设置两个按钮的height和width为3em，这样可以跟随组件大小进行变化。最终CSS样式为： 1234567891011121314151617181920212223div { display: inline-block; position: absolute; padding: 1.5em; z-index: 4; } .close { position: absolute; top: 0; right: 0; height: 3em; width: 3em; } .resize { position: absolute; bottom: 0; right: 0; height: 3em; width: 3em; }} 全屏透明窗口的部分穿透完成以后运行可以看到二维码效果。接下来需要实现二维码的调整大小和关闭。然而这时会发现一个问题，和WPF不同的是，Electron不支持透明窗口的部分穿透。什么意思呢？由于我们的弹幕是全屏播放，因此为了保证不影响正常操作，需要在初始化窗口时设置window.setIgnoreMouseEvents(true)使得鼠标点击穿透到其他程序中。但是这样就导致没有办法通过点击按钮来调整二维码大小，也没有办法通过拖放来调整二维码显示的位置。而设置window.setIgnoreMouseEvents(false)又会导致其他窗口无法响应鼠标操作。在electron的官方GitHub Issue Support click-through of transparency #1335 有许多人遇到了同样的问题。简而言之，早期人们通过主进程捕捉当前鼠标位置像素点来决定是否发送事件给Renderer，非常复杂；在Electron 3.0.0版本后加入了setWindowShapeAPI，如果是开发小部件（Gadget）的话使用这一API是非常得当的，直接将窗口大小设置为小部件的大小即可；但是由于弹幕需要全屏显示，因此需要其他方式来解决这一问题。 在Issue的最后有人提出一种解决方案，目前官方文档也已经写明：通过在元素上添加mouseenter和mouseleave事件，在鼠标进入二维码时设置window.setIgnoreMouseEvents(false)，捕捉鼠标事件；在鼠标离开元素时设置window.setIgnoreMouseEvents(true)释放鼠标事件，在本例中由于只有二维码一个元素需要处理鼠标事件，因此不会显得过于冗杂。完整实现为： 12345678let win = require('electron').remote.getCurrentWindow()let el = document.getElementById('QRCode')el.addEventListener('mouseenter', () =&gt; { win.setIgnoreMouseEvents(false)})el.addEventListener('mouseleave', () =&gt; { win.setIgnoreMouseEvents(true, { forward: true })}) 经过实现以后发现一个问题： 由于弹幕是Canvas动画，在鼠标移入/移出二维码时会导致明显的动画卡顿，在低性能设备上表现尤为明显，因此决定将这一方案弃置，转为用新窗口打开。 新窗口打开新窗口打开在实现上会比前一方案简单一点（并不），Vue组件基本和之前一样，不过由于调整二维码大小用的是原生的调整窗口大小，因此去掉resize按钮，同时把location、width和height等属性去掉即可。 接下来需要在主进程中实现二维码窗口，在主进程中创建createQRCodeWindow方法，通过传入screen.getAllDisplays()方法返回的screen对象获得窗口大小和位置进而调整每一个二维码窗口的显示；然后设置窗口属性（setAlwaysOnTop、loadURL等等）即可。值得注意的是需要在Vue Router里面配置QRCode.vue的路由。紧接着ipcMain中注册两个事件，一个是创建，另一个是关闭，传入参数为screen列表，根据列表在不同屏幕创建窗口即可。在渲染进程中通过按钮/开关等方式注册事件通过ipcRenderer触发事件并将当前已开启弹幕的屏幕的screen对象作为参数传入即可。 值得注意的是，为了避免窗口出错关闭后不断调用空引用提示错误，可以用try...catch...进行处理： 12345678910arg.forEach((idx) =&gt; { if (QRCodeWindows[idx]) { try { QRCodeWindows[idx].close() QRCodeWindows[idx] = null } catch (e) { danmakuWindows[idx] = null } } }) 如何传递参数打开窗口后我们要考虑两件事：一是如何使Vue页面知道自己所属的窗口，进而在调用ipcMain的关闭事件时指定自己所属的窗口；二是如何将二维码图片的地址从主进程传递到渲染进程中。一种方案是通过Vue Router的路由参数传递，另一种是通过ipcRenderer传递。前一种方案实现简单，但是将地址作为参数写入路由中总觉得会使地址过于丑陋，因此尝试第二种方案。 第二种方案在创建完窗口的同时通过调用window.webContents.send(channel, arguments)将参数传递过去，然后在Vue页面created环节通过注册ipcRender事件接收参数。但是实现后发现，参数并没有按照预期传递过去。这是由于我们在创建窗口并LoadURL后Vue生命周期还没有执行到created环节事件已经发出，渲染进程也就无法接收到参数。 那么为了保证事件可以被接收到，我们可以将发送参数作为一个事件放到ipcMain注册的事件中，等待渲染进程中Vue初始化完成了再进行调用，这样就确保渲染进程可以接收到参数。实现细节为： 主进程： 1234567891011121314ipcMain.on('initQRCode', () =&gt; { for (let k in QRCodeWindows) { if (QRCodeWindows.hasOwnProperty(k) &amp;&amp; QRCodeWindows[k]) { try { QRCodeWindows[k].webContents.send('initQRCode', { idx: k, src: 'http://static.danmakupie.com/qrcodes/VqUkcCq4Oj2ZmLDiROw3GA.png' }) } catch (e) { QRCodeWindows[k] = null } } }}) 渲染进程： 12345678created() { this.loading = true ipcRenderer.once('initQRCode', (event, arg) =&gt; { this.idx = arg.idx this.src = arg.src }) ipcRenderer.send('initQRCode', {})} 也就是说，等到Vue页面加载至created环节，注册事件监听后，再去触发主进程事件使其发送参数即可。但是这样有个问题是，渲染进程仍然不知道自己所在的窗口，因此主进程需要遍历所有的窗口逐一发送参数：如果窗口已经打开，那么窗口将接收参数；窗口没有打开则没有影响。这样会导致一个新问题：所有窗口初始化页面时都会触发主进程的事件，导致之前已经初始化过的窗口会不断响应并更新参数，这当然不是我们想要的，因此在渲染进程注册事件时使用once而非on方法，当触发时即注销事件，这样可以避免多次更新。 细节优化Loading界面由于二维码是从远端服务器获取图片，可能会出现图片加载时间过长，为了优化用户体验，可以加一个Loading界面。Element中提供了Loading界面，直接在div元素添加v-loading然后绑定一个Boolean变量即可。当开始载入页面时将loading变量设置为true，然后在图片加载完成时将loading变量设置为false即可。Vue中提供了图片加载完成事件v-on:load（简写为@load），直接绑定函数即可。 居中显示接下来要保证二维码图片始终居中显示。横向居中直接让div的属性设置为： 1234.container { text-align: center; margin: auto;} 即可。纵向居中稍微麻烦一点，具体可参考： CSS设置居中的方案总结-超全 和 盘点8种CSS实现垂直居中水平居中的绝对定位居中技术 由于是在Electron中实现，不需要考虑兼容性问题，因此这里使用兼容性比较差但是实现较为简单的flex，即添加一个父div，然后设置父div属性为： 1234#QRCodeParentContainer { display: flex; align-items: center;} 这样就能保证垂直居中和水平居中同时实现了。 等比例缩放但实际上这时会遇到一个问题，就是二维码并不是和窗口大小等比例缩放，且窗口没有办法等比例缩放。由官方Issue#8036可知目前Electron提供的APIwindow.setAspectRatio(aspectRatio, extraSize: {width: float, height: float})只适用于macOS而非Windows，而Issue中提供的解决方案都不能很好地解决这一问题，因此接下来着重于保证二维码能够和窗口等比例缩放且按照最短边来显示，保证显示完整，不会出现滚动条。 首先设置图片的CSS样式为： 12345.QRCode { display: block; height: 100%; widht: 100%} 然后设置包含图片的子div的样式为： 1234#QRCodeChildContainer { width: 100vmin; height: 100vmin;} 其中vmin是指视口高度和宽度之间的最小值的 1/100。视口高度是指浏览器当前文档可见部分的高度，视口宽度同理。CSS引入了vh表示视口高度的 1/100，vw表示视口宽度的 1/100，vmin表示视口高度和宽度之间的最小值的 1/100，vmax表示视口高度和宽度之间的最大值的 1/100。在这里我们用100vmin就可以保证图片的大小始终是最短边来显示，不会出现滚动条。接着设置包含子div的父div格式为： 1234#QRCodeParentContainer { height: 100vh; width: 100vw;} 这样就可以保证二维码能够跟随窗口进行大小变化。 参考： 纯css实现容器高度随宽度等比例变化的四种解决方案 vh,vw单位你知道多少？ - MDN 文档 拖拽拖拽移动的实现非常简单，在div上添加属性-webkit-app-region: drag即可。为了防止拖拽override掉按钮点击事件，需要在按钮上添加属性-webkit-app-region: no-drag： 1234567#QRCodeChildContainer { -webkit-app-region: drag;}.close { -webkit-app-region: no-drag} 总结看似简单的二维码窗口却花了很长时间去调整和实现，本次实现主要涉及到以下一些知识点： 设置position使得z-index生效 Electron中透明窗口的部分穿透 Electron中如何用ipc从主进程向渲染进程传递初始化参数 Element中的Loading控制 CSS中元素的居中显示 CSS中元素等比例缩放 CSS实现Electron窗口拖拽","link":"/2019/02/06/An-always-on-top-window-based-on-electron/"},{"title":"用编程展现绘画之美","text":"一个想法——通过Coding来画画。 这篇文章用于参加2016编程之美设计赛。 用编程展现绘画之美概述我们都知道，编程可以帮助我们更好地去探索动听的旋律： 我们也知道，编程可以帮助我们更好地吟诗作对，探索语言的魅力： 那么，编程可以帮助我们更好地去一览色彩的神奇吗？ 不妨和我一起试试，用Xaml语言来作一幅画吧。 教程首先，打开Visual Studio 2020，然后选择新建项目，在“新建项目”的对话框中选择“绘画”，在这里我们把作品命名为 Starry Night 在绘画之前，我们要准备好绘画用的材料以及想好自己想画的内容，跟着向导我们可以设定画的基本属性： 跟着向导完成初始化操作以后，我们可以看到接下来让我们挥洒灵感的地方： 而作品的标题、风格等信息已经定义好。 当然我们可以通过编写Xaml来绘画————例如，我们将画布涂上蓝色，再将整幅画按照黄金分割比例进行分隔：","link":"/2016/04/30/BoP/"},{"title":"在Ubuntu Server上配置CUDA环境","text":"在配置Ubuntu Server的CUDA和TensorFlow的过程中，遇到了很多问题（驱动无法正常运行、CUDA无法正常配置等等），在网上找了很多资料，最终正确安装驱动、CUDA、cuDNN和TensorFlow（GPU版本），因此将安装过程记录下来，方便以后再配环境。 版本要求： Ubuntu 16.04 LTS CUDA 9.0 cuDNN v7 Python 3.6 TensorFlow r1.10 PyTorch 0.4.1 1 准备工作1.1 检查GPU是否符合CUDA运行要求在Shell中运行命令： 1lspci | grep -i nvidia 查看GPU型号，然后在https://developer.nvidia.com/cuda-gpus页面中查找设备的GPU是否在支持CUDA的列表中。 1.2 检查GCC版本1gcc --version 对于Ubuntu 16.04来说，gcc版本需要&gt;5.4.0。 1.3 检查Kernel版本1uname -r 对于Ubuntu 16.04来说，内核版本需要&gt;4.4.0。 然后需要安装对应版本的Kernel Header： 1sudo apt-get install linux-headers-$(uname -r) 1.4 安装对应的库1234sudo apt-get install libprotobuf-dev libleveldb-dev libsnappy-dev libopencv-dev \\ libboost-all-dev libhdf5-serial-dev libgflags-dev libgoogle-glog-dev liblmdb-dev \\ protobuf-compiler g++ freeglut3-dev build-essential libx11-dev libxmu-dev libxi-dev \\ libgl1-mesa-glx libglu1-mesa libglu1-mesa-dev 2 安装CUDA2.1 首先安装显卡驱动（选做，CUDA自带的驱动可能会无法正常运行）(1) 禁用Nouveau运行命令： 1lsmod | grep nouveau 如果有显示内容，则说明Nouveau驱动正在运行，需要根据教程关闭Nouveau。 (2) 卸载之前的显卡驱动(3) 下载并安装驱动在NVIDIA驱动下载页面按照自己的GPU型号、系统以及CUDA版本选择驱动并进行下载，得到诸如nvidia-diag-driver-local-repo-ubuntu1604_3XY.AB-1_amd64.deb的文件（XY.AB需要根据下载版本进行修改）。 然后运行以下命令： 1234sudo dpkg -i nvidia-diag-driver-local-repo-ubuntu1604_3XY.AB-1_amd64.deb（XY.AB需要根据下载版本进行修改）sudo apt-get updatesudo apt-get install cuda-driverssudo reboot 运行后系统会进行重启，在运行命令前请保存所有正在运行的工作。 重启后运行： 1sudo nvidia-smi 如果正常输出显卡状态说民驱动安装成功。 2.2 安装CUDA在CUDA下载页面下载Runfile形式的CUDA安装包，形式为cuda_9.0.176_384.81_linux.run。 具体CUDA和cuDNN版本参考TensorFlow安装要求，对于r1.10版本来说支持的CUDA版本为9.0。 (Optional) 对于有GUI的系统来说，需要在启动时按下Ctrl + Alt + F1/F4进入tty1/tty4模式，然后运行： 1sudo service lightdm stop 停止GUI运行。 开始安装CUDA。 1sudo sh cuda_9.0.176_384.81_linux.run 一路按空格，输入accept同意用户协议 安装程序询问是否安装驱动，输入no 询问是否安装CUDA Toolkit，输入yes 更改CUDA Toolkit安装位置，这里不作修改 是否创建/usr/local/cuda符号链接，如果只安装一个CUDA版本，输入yes 询问是否安装CUDA Samples，输入yes 更改CUDA Samples安装位置，这里不作修改 如果没有报错，则说明安装成功。如果提示： Installing the CUDA Toolkit in /usr/local/cuda-8.0 … Missing recommended library: libGLU.so Missing recommended library: libX11.so Missing recommended library: libXi.so Missing recommended library: libXmu.so 则需要安装依赖库： 1sudo apt-get install freeglut3-dev build-essential libx11-dev libxmu-dev libxi-dev libgl1-mesa-glx libglu1-mesa libglu1-mesa-dev 然后重新运行CUDA安装程序即可。 2.3 配置环境变量运行： 1sudo vi /etc/profile 用vi编辑启动脚本。用方向键将光标定位至文件末尾然后按i插入以下内容： 12export PATH=$PATH:/usr/local/cuda-9.0/binexport LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda-9.0/lib64:/usr/local/cuda-9.0/extras/CUPTI/lib64 在Shell中运行： 12export PATH=$PATH:/usr/local/cuda-9.0/binexport LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda-9.0/lib64:/usr/local/cuda-9.0/extras/CUPTI/lib64 2.4 验证CUDA是否安装成功(1) 验证驱动版本运行： 1cat /proc/driver/nvidia/version 查看驱动版本。 (2) 查看nvcc版本运行： 1nvcc -V i 查看nvcc版本。 (3) 运行示例（选做）按照教程运行示例。 3 安装cuDNN在cuDNN下载页面下载TensorFlow支持的cuDNN版本，目前支持的是cuDNN v7。在下载时需要注册NVIDIA账号和开发者账号。 下载后得到一个诸如cudnn-9.0-linux-x64-v7.tgz的压缩包。 运行： 1tar -xvzf cudnn-9.0-linux-x64-v7.tgz 进行解压，在当前目录得到cuda文件夹。 然后运行 123sudo cp cuda/include/cudnn.h /usr/local/cuda/includesudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64sudo chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn* 将cuDNN拷贝至CUDA目录中。 可以按照官方教程来验证cuDNN的安装。 4 安装Tensorflow如果没安装pip，则需要安装pip： 1sudo apt-get install python3-pip python3-dev 然后尝试从官方源下载安装TensorFlow： 1pip3 install tensorflow-gpu 如果安装缓慢或者网络错误，请尝试切换至清华大学提供的镜像源： 1pip3 install tensorflow-gpu -i https://pypi.tuna.tsinghua.edu.cn/simple 接下来验证安装，在Shell或者IDE中运行代码： 12345# Python Codeimport tensorflow as tfhello = tf.constant('Hello, TensorFlow!')sess = tf.Session()print(sess.run(hello)) 等待，如果能够正常输出 1Hello, TensorFlow! 说明安装成功。如果输出错误信息，可以参考官方文档解决。 5 安装PyTorch运行： 1conda install pytorch torchvision -c pytorch 安装完成后，在Shell或者IDE里运行： 1234# Python Codeimport torchprint('CUDA support for Pytorch: ', torch.cuda.is_available())print('You are using device: ', torch.cuda.get_device_name(0)) 如果看到True和显卡名称，说明安装成功。 参考文档ubuntu16.04安装nvidia driver + cuda + cudnn (1) TensorFlow官方文档 CUDA安装文档（英文） cuDNN安装文档（英文） Ubuntu 14.04 上安装 CUDA 7.5/8.0 超详细教程","link":"/2018/08/15/Install-CUDA-on-Ubuntu-Server/"},{"title":"浅谈BackgroundWorker的使用","text":"这是弹幕派开发文档系列的第一篇！在开发弹幕派的过程中，通过网上的资料、MSDN学习到了很多WPF和C#的相关知识，在这里一并写出来，希望能够帮助到C#特别是WPF开发者。弹幕派是我们开发的一个桌面弹幕小程序，说它小，但是它的开发周期可不短，在开发过程中学到了很多东西，今天我要说的便是第一个，如何运用后台进程连接网络。 浅谈BackgroundWorker在WPF中的使用弹幕派在刚开始UI的渲染（即弹幕的产生和刷新）以及弹幕内容的获取都是在一个进程中完成的，这样导致一个问题就在于每当从网络获取数据时就会出现明显卡顿，如果网络失去连接就会导致程序假死无法继续进行。很明显这样是不行的，因此必须要引入多线程，通过后台线程获取数据，再将数据更新到UI中。 在WPF中，为了保证线程安全，Windows只允许创建UI元素的线程访问这些元素。如果在其他线程中尝试修改UI元素的属性，就会触发STA错误，导致程序崩溃。这样做是为了保证内容渲染的一致性。但是也会导致一个问题——我们无法通过后台线程直接修改UI元素的属性。WPF通过Dispatcher机制解决了这一问题。WPF为UI渲染设置了一个Dispatcher，这个Dispatcher我们可以理解为调度员，它与UI渲染相关的事件排成一个队列，按优先级对其队列中的元素进行排序，并且按序执行，这样可以保证UI在渲染时只执行一个任务，保证UI内容的一致性。如果我们的后台线程需要对界面元素的属性进行修改，可以请求UI线程代替它完成这一操作。那么如何请求UI线程帮忙呢？通过向Dispatcher注册工作项，将想要执行的任务加入队列，这个任务会在某个时间由Dispatcher完成，后台进程无需插手UI渲染。 Dispatcher类提供两种调用方法，一种是Invoke同步调用，调用方必须等待UI进程完成这一任务才会返回并继续下面的操作；另一种是BeginInvoke异步调用，调用方在调用后会立即返回。在弹幕派原有的代码中对这一部分有所使用。原本弹幕派刷新弹幕是通过每秒钟定时修改所有弹幕TextBlock的Margin属性的值达到移动弹幕的效果，那么在计时器Timer的Elapse事件触发的函数中，如果直接修改这些Margin会触发STA错误。因此需要通过BeginInvoke来执行这一操作。 12345private delegate void DispatcherDelegateTimer(); // 声明委托private void OnTimedEvent(object sender, EventArgs e) { this.Dispatcher.BeginInvoke(DispatcherPriority.Normal, new DispatcherDelegateTimer(UpdateUI)); //通过BeginInvoke注册} 使用后台进程有三种方式，第一种是Task，第二种是Thread，第三种就是我们今天要介绍的BackgroundWorker了。这三种方法各有千秋，但是BackgroundWorker更适合用于实现后台连接网络下载，因此在弹幕派的弹幕获取、自动更新等地方都主要使用了BackgroundWorker。 那么如何用BackgroundWorker实现后台连接网络获取数据呢？首先我们需要引入命名空间 1using System.ComponentModel; 之后我们需要添加BackgroundWorker组件，这一组件可以从Xaml界面添加——从工具箱中的“组件”选项卡中，添加BackgroundWorker组件；也可以在代码中声明： 1private BackgroundWorker fetchBW = new BackgroundWorker(); 之后在初始化过程中设置BackgroundWorker的属性，可以在构造函数中，也可以在Loaded函数中。 12345fetchBW.WorkerReportsProgress = true; //是否报告工作进度fetchBW.WorkerSupportsCancellation = true; //是否允许异步取消工作fetchBW.DoWork += new DoWorkEventHandler(FetchBW_DoWork); //这里声明要做的工作fetchBW.ProgressChanged += new ProgressChangedEventHandler(FetchBW_ProgressChanged); //当工作进度改变时更新界面fetchBW.RunWorkerCompleted += new RunWorkerCompletedEventHandler(FetchBW_RunWorkerCompleted); //当工作完成时处理工作结果 首先要设置是否报告工作进度，如果WorkerReportsProgress为true，则可以在ProgressChanged事件的函数中处理进度条等信息。当然Progress的数值要自行在DoWork函数中利用ReportProgress设置数值的变化（例如获取已经下载的进度并更新进度条）。 1234567891011121314151617181920212223private void backgroundWorker1_DoWork(object sender, DoWorkEventArgs e){ BackgroundWorker worker = sender as BackgroundWorker; for (int i = 1; i &lt;= 10; i++) { if (worker.CancellationPending == true) { e.Cancel = true; break; } else { // Perform a time consuming operation and report progress. System.Threading.Thread.Sleep(500); worker.ReportProgress(i * 10); } }}private void backgroundWorker1_ProgressChanged(object sender, ProgressChangedEventArgs e){ resultLabel.Text = (e.ProgressPercentage.ToString() + \"%\");} 如果允许异步取消（WorkerSupportsCancellation = false），则通过CancelAsync可以取消工作。此时CancellationPending = true。之后再绑定DoWork、ProgressChanged、RunWorkerCompleted事件。DoWork里写明主要功能，同时需要回报进度和处理取消事件。ProgressChanged里根据进度处理事件（修改进度条等），RunWorkerCompleted事件处理DoWork的结果。 那么如何在RunWorkerCompleted中获取DoWork的结果呢？ 1234567891011121314151617181920212223242526private void FetchBW_DoWork(Object sender, DoWorkEventArgs e) { BackgroundWorker backgroundWorker = sender as BackgroundWorker; //sender即源BackgroundWorker //...... // 将获得的结果进行封装，然后将解析结果保存至e.Result中供RunWorkerCompleted使用 fetchedData result = new fetchedData(num, contentList); e.Result = result; backgroundWorker.ReportProgress(100); // 当Dowork完成时直接将进度设为100%，触发RunWorkerCompleted事件}private void FetchBW_ProgressChanged(object sender, ProgressChangedEventArgs e) { return;}private void FetchBW_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e) { if (e.Cancelled == false &amp;&amp; e.Error == null) { fetchedData result = e.Result as fetchedData; danmuStorage.AddRange(result.contentList); result.contentList.Clear(); } else { Debug.WriteLine(\"获取时出现错误\"); } bwTimer.Stop();} 将结果保存至DoWork的e.Result中，之后可以在RunWorkerCompleted的e.Result中获取到结果。处理结果时要处理Cancelled（取消事件）和Error（错误事件）。这里要注意的是，对于网络访问等操作来说，很有可能会出现网络连接中断导致超时，因此这个时候需要我们设置一个定时器，在开始处理事件前启动定时器，然后在定时器超时时调用CancelAsync即可。 BackgroundWorker不仅可以在WPF中调用，在WinForm中也可以。BackgroundWorker最适合的场景便是后台下载，通过DoWork、ReportProgress和RunWorkerCompleted三者分开，可以明确地划分执行工作、更新界面、处理结果三个部分，与定时器Timer和按钮Button结合使用还可以保证程序不会由于网络连接中断等原因一直卡住。 参考资料wpf 多线程 线程处理模型 如何：使用后台辅助线程 如何：在后台下载文件 如何：在后台运行操作 BackgroundWorker Dispatcher类 委托 delegate","link":"/2016/08/29/BackgroundWorker/"},{"title":"用Hexo搭建一个GitHub个人Blog","text":"不知道有没有人像我一样，想要建立个人主页，可是对JaveScript和PHP都不了解。不过现在好了，基于开源的Hexo，只需1小时，即可在GitHub搭建一个简单又美观的个人主页，并在上面发表你的第一篇文章。Here we go. 目录 准备 配置Git 安装Hexo 部署Hexo 下载主题 个性化你的博客 部署你的Blog 写文章 更多配置 添加站长统计和SiteMap 支持数学公式 添加RSS订阅 节点分流 准备 Node.js Git 选装 Markdown Pad 2 - Markdown编辑器 Visual Studio Code - Markdown编辑器 配置Git首先在GitHub上注册免费账号。接着在账户界面选择+ New repository，在Repository Name中填入用户名.github.io，选择Public，点击Create Respository创建一个目录。这个目录就是你的网站的存储空间。 接下来打开Git Bash，在Git Bash中输入 1cd ~/. ssh 以检查本机的ssh密钥。如果提示：’No such file or directory 说明你是第一次使用Git。 生成新的SSH Key： 123ssh-keygen -t rsa -C &quot;邮件地址@youremail.com&quot; Generating public/private rsa key pair.Enter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):&lt;此处直接回车&gt; 这里邮箱地址要填入注册邮箱地址。 然后设置密码： 12Enter passphrase (empty for no passphrase):&lt;输入加密串&gt;Enter same passphrase again:&lt;再次输入加密串&gt; 在回车中会提示你输入一个密码，这个密码会在你提交项目时使用，如果为空的话提交项目时则不用输入。这个设置是防止别人往你的项目里提交内容。注意：输入密码的时候没有*字样的，你直接输入就可以了。 最后看到这样的界面，就成功设置SSH Key了： 在本机设置SSH Key后，需要添加SSH Key到GitHub上，为之后的从本地向GitHub上提交网站做准备。 用文本编辑器打开C:\\Users\\用户名.ssh\\id_rsa.pub，里面是刚才生成的密钥。 登录GitHub，在右上角的头像选择Settings -&gt; SSH Key -&gt; New SSH Key，然后将文件中的内容拷贝至Key中即可。Title为这个SSH Key的名称，可以自定。 测试设置结果： 1$ ssh -T git@github.com 如果得到如下反馈： 123The authenticity of host &apos;github.com (207.97.227.239)&apos; can&apos;t be established.RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.Are you sure you want to continue connecting (yes/no)? 此时输入yes即可。然后会看到： 1Hi thesharing! You&apos;ve successfully authenticated, but GitHub does not provide shell access. 说明SSH Key已经设置成功，这台设备的Git Bash已经可以访问你的GitHub了。 接下来需要设置登录信息： 12$ git config --global user.name &quot;你的用户名&quot;$ git config --global user.email &quot;你的注册邮箱&quot; 到这一步，Git Bash就配置完毕了。 安装HexoHexo 是一个快速、简洁且高效的博客框架。在安装完以上的软件以后，在命令提示行中使用npm命令即可完成安装。 1npm install -g hexo-cli 可能会有网络错误，可以重新执行命令安装。 接下来执行 1npm install 以安装所需的依赖包。 部署Hexo指定一个文件夹作为你的博客存放的文件夹，然后从此文件夹打开命令行，开始部署： 1hexo init 等待一段时间，Hexo会在这个文件夹下建立工作目录。现在本地博客已经建立完毕，执行以下命令： 12hexo generatehexo server 然后在浏览器中访问localhost:4000即可看到初始化的博客内容。 下载主题在Hexo的官方网站Themes|Hexo 上有一些主题可供使用，在Hexo的GitHub主页Themes - hexojs/hexo上提供了更多的主题链接可供下载。你可以选择用Git将主题Clone到本地，以获得主题的实时更新，也可以通过Download Zip将主题下载到本地的hexo文件夹/theme/使用。针对不同主题会有不同的设置项，一般主题的GitHub主页会提供Wiki来帮助设置主页。本次以PPOffice开发的Icarus为例进行主题方面的设置。 个性化你的博客首先要配置你的站点信息，用Visual Studio Code等文本编辑器（不推荐使用记事本，存在一些格式上的问题）打开hexo/_config.yml开始配置。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788# Site 站点信息设置title: Zhilong's Blog # 站点标题subtitle: Have a try # 副标题description: Zhilong's personal blog on github # 给搜索引擎看的，对站点的描述，可以自定义author: Thesharing # 网站作者：在站点下方可以看到language: zh-CN # 语言：简体中文 # URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: http://thesharing.github.io/ #站点地址root: / #站点的根目录permalink: :year/:month/:day/:title/ #文章默认存放位置的格式，这里表示目录结构为：year/month/day/title.md# Directorysource_dir: sourcepublic_dir: publictag_dir: tagsarchive_dir: archivescategory_dir: categoriescode_dir: downloads/codei18n_dir: :langskip_render: [readme.md, \"*.html\", \"*.htm\"] # Writing 文章布局、写作格式的定义new_post_name: :title.md # 新文章的文章名，这里是用文章标题作为文件名default_layout: post # 默认的布局，详情查看https://hexo.io/zh-cn/docs/writing.html以获得更多信息auto_spacing: true # 是否在中文字符和英文字符之间自动添加空格titlecase: false # 是否将标题大写external_link: true # Open external links in new tabfilename_case: 0render_drafts: falsepost_asset_folder: falserelative_link: falsefuture: truehighlight: #语法高亮 enable: true backtick_code_block: true line_number: true tab_replace: # 目录和标签default_category: uncategorized # 默认目录category_map:tag_map:sitemap: path: sitemap.xmlbaidusitemap: path: baidusitemap.xml# Archives 默认值为2，这里都修改为1，相应页面就只会列出标题，而非全文## 2: Enable pagination## 1: Disable pagination## 0: Fully Disablearchive: 1category: 1tag: 1# Server 本地服务器信息## Hexo uses Connect as a server## You can customize the logger format as defined in## http://www.senchalabs.org/connect/logger.htmlport: 4000logger: falselogger_format: # Date / Time format 日期、时间格式## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DDtime_format: HH:mm:ss # Pagination 每页显示文章数，可以自定义## Set per_page to 0 to disable paginationper_page: 10pagination_dir: page# Extensions 配置站点所用主题和插件## Plugins: https://github.com/tommy351/hexo/wiki/Plugins## Themes: https://github.com/tommy351/hexo/wiki/Themestheme: icarus # 主题 # Deployment 站点部署到github的设置## 官方文档：https://hexo.io/zh-cn/docs/deployment.htmldeploy: type: git repository: https://github.com/thesharing/thesharing.github.io.git # Repository地址 branch: master 可以将其直接复制入你的_config.yml文件中使用。下面解释各项如何修改。 Site按照说明修改即可。 URL将url改为你的博客首地址，可以到GoDaddy上购买域名进行绑定，那么这里就应该改成你的域名而非GitHub.io地址。 Writing - Pagination均不必修改，如自定义请参考官方Doc进行修改。 Theme将Theme修改为你下载的主题的主题名，要注意，theme文件夹下的主题文件夹也要对应名称。 Deploy将repository改为https://github.com/你的用户名/你的用户名.github.io.git，branch不变。 此时第一个配置文件设置结束，我们打开主题的配置文件来配置主题样式。这里以icarus为例，打开hexo/themes/icarus/_config.yml： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235# Version of the Icarus theme that is currently usedversion: 2.3.0# Path or URL to the website's iconfavicon: /images/favicon.png# Path or URL to RSS atom.xmlrss: rss.xml# Path or URL to the website's logo to be shown on the left of the navigation bar or footerlogo: /images/logo.png# Open Graph metadata# https://hexo.io/docs/helpers.html#open-graphopen_graph: # Facebook App ID fb_app_id: # Facebook Admin ID fb_admins: # Twitter ID twitter_id: # Twitter site twitter_site: # Google+ profile link google_plus: # Navigation bar link settingsnavbar: # Navigation bar menu links menu: 首页: / 归档: /archives 关于: /about # Navigation bar links to be shown on the right links: GitHub: icon: fab fa-github url: 'http://github.com/thesharing/'# Footer section link settingsfooter: # Links to be shown on the right of the footer section links: Creative Commons: icon: fab fa-creative-commons url: 'https://creativecommons.org/' Attribution 4.0 International: icon: fab fa-creative-commons-by url: 'https://creativecommons.org/licenses/by/4.0/'# Article display settingsarticle: # Code highlight theme # https://github.com/highlightjs/highlight.js/tree/master/src/styles highlight: pojoaque # Whether to show article thumbnail images thumbnail: false # Whether to show estimate article reading time readtime: true# Search plugin settings# http://ppoffice.github.io/hexo-theme-icarus/categories/Configuration/Search-Pluginssearch: # Name of the search plugin type: insight# Comment plugin settings# http://ppoffice.github.io/hexo-theme-icarus/categories/Configuration/Comment-Pluginscomment: # Name of the comment plugin type: disqus shortname: thesharing# Donation entries# http://ppoffice.github.io/hexo-theme-icarus/categories/Donation/donate: - # Donation entry name type: alipay # Qrcode image URL qrcode: '/images/alipay.jpg' - # Donation entry name type: wechat # Qrcode image URL qrcode: '/images/wechat.jpg' # - # # Donation entry name # type: paypal # # Paypal business ID or email address # business: '' # # Currency code # currency_code: USD # - # # Donation entry name # type: patreon # # URL to the Patreon page # url: ''# Share plugin settings# http://ppoffice.github.io/hexo-theme-icarus/categories/Configuration/Share-Pluginsshare: # Share plugin name type: sharejs# Sidebar settings.# Please be noted that a sidebar is only visible when it has at least one widgetsidebar: # left sidebar settings left: # Whether the left sidebar is sticky when page scrolls # http://ppoffice.github.io/hexo-theme-icarus/Configuration/Theme/make-a-sidebar-sticky-when-page-scrolls/ sticky: false # right sidebar settings right: # Whether the right sidebar is sticky when page scrolls # http://ppoffice.github.io/hexo-theme-icarus/Configuration/Theme/make-a-sidebar-sticky-when-page-scrolls/ sticky: false# Sidebar widget settings# http://ppoffice.github.io/hexo-theme-icarus/categories/Widgets/widgets: - # Widget name type: profile # Where should the widget be placed, left or right position: left # Author name to be shown in the profile widget author: Your Name # Title of the author to be shown in the profile widget author_title: Your Title # Author's current location to be shown in the profile widget location: Your Location # Path or URL to the avatar to be shown in the profile widget avatar: /images/avatar.png # Email address for the Gravatar to be shown in the profile widget gravatar: # Whether to show avatar image rounded or square avatar_rounded: true # Path or URL for the follow button follow_link: 'http://github.com/thesharing/' # Links to be shown on the bottom of the profile widget social_links: Github: icon: fab fa-github url: '' StackOverflow: icon: fab fa-stack-overflow url: '' Steam: icon: fab fa-steam url: '' Instagram: icon: fab fa-instagram url: '' Weibo: icon: fab fa-weibo url: '' Facebook: icon: fab fa-facebook url: '' Twitter: icon: fab fa-twitter url: '' - # Widget name type: toc # Where should the widget be placed, left or right position: right - # Widget name type: links # Where should the widget be placed, left or right position: left # Links to be shown in the links widget links: GitHub - Thesharing: http://github.com/thesharing/ - # Widget name type: recent_posts # Where should the widget be placed, left or right position: right - # Widget name type: archive # Where should the widget be placed, left or right position: right - # Widget name type: category # Where should the widget be placed, left or right position: right - # Widget name type: tag # Where should the widget be placed, left or right position: right - # Widget name type: tagcloud # Where should the widget be placed, left or right position: left# Other plugin settingsplugins: # Enable page animations animejs: true # Enable the lightGallery and Justified Gallery plugins # http://ppoffice.github.io/hexo-theme-icarus/Plugins/General/gallery-plugin/ gallery: true # Enable the Outdated Browser plugin # http://outdatedbrowser.com/ outdated-browser: true # Enable the MathJax plugin # http://ppoffice.github.io/hexo-theme-icarus/Plugins/General/mathjax-plugin/ mathjax: true # Show the back to top button on mobile devices back-to-top: true # Google Analytics plugin settings # http://ppoffice.github.io/hexo-theme-icarus/Plugins/General/site-analytics-plugin/#Google-Analytics google-analytics: # Google Analytics tracking id tracking_id: # Baidu Analytics plugin settings # http://ppoffice.github.io/hexo-theme-icarus/Plugins/General/site-analytics-plugin/#Baidu-Analytics baidu-analytics: # Baidu Analytics tracking id tracking_id: # Hotjar user feedback plugin # http://ppoffice.github.io/hexo-theme-icarus/Plugins/General/site-analytics-plugin/#Hotjar # hotjar: # # Hotjar site id # site_id: # Show a loading progress bar at top of the page progressbar: true # Show the copy button in the highlighted code area clipboard: true # BuSuanZi site/page view counter # https://busuanzi.ibruce.info busuanzi: false# CDN provider settings# http://ppoffice.github.io/hexo-theme-icarus/Configuration/Theme/speed-up-your-site-with-custom-cdn/providers: # Name or URL of the JavaScript and/or stylesheet CDN provider cdn: unpkg # Name or URL of the webfont CDN provider fontcdn: google # Name or URL of the webfont Icon CDN provider iconcdn: fontawesome 可配置项 在配置的navbar部分中按照页面名: 页面目录的格式可以自行添加页面。 logo中可以设置Logo以及Logo大小。建议直接替换而非自定目录。 avatar中设置资料页的头像，author为作者名，author_title为作者介绍，location为地区，follow为“关注我”指向的地址。 highlight为语法高亮的主题 sidebar为资料页的位置（左、右） thumbnail设置是否显示缩略图 favicon设置网站图标 social_links设置社交图标 comment设置评论系统，disqus后填入论坛名即可 plugin中设置Google站长分析等插件信息 Disqus进入Disqus完成注册以后，点击右上角的“设置”，选择“Add Disqus To Site”，然后按照向导进行设置即可。这里要注意，Disqus URL中填写的就是上面设置文件中要填写的论坛名。 生成并预览设置完成后，在hexo文件夹下打开命令行输入 12hexo generatehexo server 如果运行成功，那么输入localhost:4000即可打开你的个人主页。 部署你的Blog之前我们一直在本地运行，接下来我们要把个人主页部署到GitHub上去。在每一次对设置的修改以及写文章之后都要用hexo generate命令重新生成一次。然后右击hexo文件夹，选择Git Bash Here，打开Git Bash，在Git Bash中输入 1$ npm install hexo-deployer-git --save 等待安装完成以后，再执行： 1$ hexo deploy 有可能会提示输入邮箱和密码，按照之前设置的输入即可。如果失败可能是网络问题，重新尝试一下。 提示成功以后可以在你的GitHub的该Repository下看到Commit成功+1，说明服务器已经接受了你的提交，一般等待3-5分钟以后，你的Blog便会被刷新。此时用你的用户名.github.io即可访问到你的Blog，怎么样，是不是很Coooool？ 写文章那么说了这么多，个人主页已经建好，接下来就是充实内容了。内容怎么充实呢？写文章咯。 在hexo文件夹下打开命令行，输入： 1hexo new [layout] &lt;title&gt; 这里[layout]是指你所用的模板名称，所有模板都在hexo\\scaffolds\\文件夹下存放，关于模板的更多信息，请访问官方Doc，里面有很详尽的解释。 title则是文章的标题，可以为中文。 在执行完命令后，到hexo\\source\\_posts\\文件夹下可以找到生成的Markdown文件。用MarkdownPad 2或者Visual Studio Code打开Markdown文件即可开始书写你的文章，正如我现在所做。至于Markdown文法，又是一个大坑。 对于图片，我们需要将文章中要用到的图片上传至图床然后引用外链。图床是指存放图片的云存储空间，我个人正在使用的是七牛，可以找一个适合自己的图床一直用下去。 在写完文章以后，再次hexo generate然后部署就可以了。 Markdown教程：如何快速掌握Markdown语法？ Hexo中支持的语法高亮：highlight.js - CSS classes reference 更多配置添加站长统计和SiteMap为了提升在搜索引擎中的搜索权重，可以通过添加站长统计以及提交SiteMap进一步优化SEO。 首先注册百度站长统计和 Google Analytics，获得追踪ID。对于百度站长统计来说，只需要在管理后台的新版统计代码获取页面复制追踪ID至icarus的baidu-analytics - tracking_id即可。对于Google Analytics来说，只需要在管理后台的媒体资源设置页面复制跟踪 ID至icarus的google-analytics - tracking_id即可。 然后需要生成SiteMap。在Hexo根目录下执行： 12npm install hexo-generator-sitemap --savenpm install hexo-generator-baidu-sitemap --save 安装完成后在Hexo文件夹中的_config.yml中添加： 1234sitemap: path: sitemap.xmlbaidusitemap: path: baidusitemap.xml 然后运行hexo -g即可生成sitemap.xml和baidusitemap.xml文件。 在生成了SiteMap文件后需要进行提交。 百度提交方式为： 访问链接提交|百度搜索资源平台并用百度账号登录，然后选择自动提交 - sitemap方式填入baidusitemap.xml的地址即可。 Google提交方式为： 访问Search Console，用Google账号登录，下载Google验证网页，将其放入hexo/source文件夹中，同时在Hexo的_config.yml文件中设置渲染排除项： 1skip_render: [readme.md, \"*.html\", \"*.htm\"] 然后运行hexo generate并运行hexo deploy。接着在Search Console的抓取 - 站点地图部分指定sitemap.xml的地址即可。 可参考hexo干货系列：（六）hexo提交搜索引擎（百度+谷歌） 支持数学公式目前主流的数学公式库为MathJax，对于icarus这样直接支持MathJax的主题，在其_config.yml文件的plugin部分设置mathjax: true即可。 对于不支持MathJax的主题来说，在Hexo根目录下运行： 1npm install --save hexo-math 然后在Hexo的_config.yml文件中设置MathJax： 123456math: engine: 'mathjax' mathjax: src: custom_mathjax_source config: # MATHJAX CONFIG 可参考hexo中插入数学公式 添加RSS订阅首先在Hexo根目录下运行： 1npm install --save hexo-generator-feed 然后在Hexo的_config.yml文件中添加配置： 1234567feed: type: atom path: rss.xml limit: 0 hub: content: true order_by: -date 接着在icarus的_config.yml文件中添加RSS的入口，可以在Navbar部分添加RSS链接： 1234567navbar: # Navigation bar menu links menu: 首页: / 归档: /archives 关于: /about RSS: /rss.xml 也可以在Social Links部分添加： 1234social_links: RSS: icon: fab fa-rss url: '/rss.xml' 可参考为hexo博客添加RSS订阅功能 节点分流如果你已经将你的个人主页挂靠在自己申请的域名上，那么你可以通过域名解析进行节点分流，国外用户访问GitHub，国内用户访问coding.net，从而解决GitHub在国内访问速度慢的问题。 首先在coding.net（现在又称腾讯云开发者平台）注册账号，并新建一个项目，然后在项目设置中开启Pages服务。然后在Hexo的_config.xml文件中设置deploy到多个仓库中： 12345deploy: type: git repository: github: git@github.com:abc/abc.github.io.git tencent: git@git.dev.tencent.com:abc/abc.git 接下来运行hexo d将页面分别部署到两个仓库中。访问coding.net / GitHub提供的原始网址，保证可以正常访问。 再在云服务商的域名解析页面进行设置，添加CNAME记录，境外线路指向abc.github.io，境内线路指向abc.coding.me。等待DNS刷新后就可以进行节点分流了。 推荐阅读 与 参考资料文档 | Hexo Hexo系列教程 - 2 如何搭建一个独立博客——简明Github Pages与Hexo教程 Hexo你的博客 Hexo的GitHub文档（英文） Markdown 语法 问题 Markdown Pad 2 无法正常预览怎么办？ 按照官网提示，安装Awesomium 1.6.6 SDK以及Microsoft’s DirectX End-User Runtimes (June 2010)以后可以解决。","link":"/2016/02/23/Build-a-Github-Blog-with-Hexo/"},{"title":"如何快速掌握Markdown语法？","text":"Markdown 是一种轻量级标记语言。它允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML(或者HTML)文档。这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。掌握Markdown语法的基本语法，只需要十点就够了。 Q: 有哪些网站可以用来写Markdown呢？ A: Github、简书都支持Markdown，Github中可以一边写Markdown一边预览。 Q: 有哪些Markdown编辑器呢？ A: 近似全能的新兴编辑器Visual Studio Code、MarkdownPad都可以用来写Markdown，你可以用他们来进行练习。 在Gist中，用Github账号登录以后即可建立一个Gist（可以理解为文章），在里面编辑Markdown文档可以直接点击Preview查看效果。 在Visual Studio Code中新建一个Markdown文档（即新建文档 -&gt; 另存为 文件名.md），在编辑时点击右上角预览按钮可以实时预览效果。 目录 一、段落和换行 二、标题 三、列表 四、链接 五、图片 六、粗体和斜体 七、代码 八、引用 九、反斜杠 十、分割线 Tips 一、段落和换行在Markdown里，一个换行不会另起一行，只有两个（及以上）的换行会另起一行。这是为了保证书写格式的整齐。 每一行的行首不能有空格和缩进。 二、标题用 # 来标记标题，# 越多，标题级别越小。# 后面要有一个空格，表明这个#是标题的意思。 12345# Head 1## Head 2### Head 3#### Head 4##### Head 5 Head 1Head 2Head 3Head 4Head 5三、列表用 * 来标记无序列表的项目，* 后面要有空格，缩进可以调整项目级别。 12345* Item 1* Item 2* Item 3 * Item 3.1 * Item 3.2 Item 1 Item 2 Item 3 Item 3.1 Item 3.2 用 1.、2.、3.（数字后面加一个点）标记有序列表的项目，标号后面要有空格。 12341. Item 12. Item 23. Item 34. Item 4 Item 1 Item 2 Item 3 Item 4 四、链接用方括号和圆括号表示链接。方括号括起 网址的标题或描述， 圆括号括起 网址。就像这样： 1[弹幕派](www.danmakupie.com) 弹幕派 五、图片图片和链接比较像，只不过图片要在前面加一个感叹号（!），方括号括起 图片的标题或描述，圆括号括起图片地址。 1![弹幕派Logo](http://7xr64j.com1.z0.glb.clouddn.com/blog/howtowritemarkdown/danmakupie-logo.png) 六、粗体和斜体用**和*分别标记粗体和斜体。 1**粗体** *斜体* 粗体 斜体 七、代码代码分为两种，一种是大段文字里掺杂一些代码，用`（键盘左上角的反引号）标记。 1在写C语言之前，要引入`#include &lt;stdio.h&gt;`才能正常编译。 在写C语言之前，要引入#include &lt;stdio.h&gt;才能正常编译。 另外一种是大块代码，用三个`（反引号）标记。 ``` #include int main(void){return 0;}``` 12345#include &lt;stdio.h&gt; int main(void){ return 0;} 我们还可以将代码行都缩进一个Tab，从而将这些行标记为代码（这也就是为什么不要在普通文字前面缩进）。 12345[Tab] #include &lt;stdio.h&gt;[Tab] [Tab] int main(void){[Tab] return 0;[Tab] } 12345#include &lt;stdio.h&gt; int main(void){ return 0;} 八、引用有的时候我们需要标明一段话是引用自其他文章的，我们用&gt;标记。 123456&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,&gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.&gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.&gt; &gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse&gt; id sem consectetuer libero luctus adipiscing. This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisseid sem consectetuer libero luctus adipiscing. 九、反斜杠（转义字符）上面可以看到，有很多字符都用来当标记符了。那么如果我们需要输入这些字符怎么办呢？答案就是反斜杠，用反斜杠来转义这些字符。 1\\*literal asterisks\\* *literal asterisks* Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号： 123456789101112\\ 反斜线` 反引号* 星号_ 底线{} 花括号[] 方括号() 括弧# 井字号+ 加号- 减号. 英文句点! 惊叹号 十、分割线在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。 1234567* * *********- - - Tips:1. 如果想要添加一个发送电子邮件的链接该怎么办？1[联系我们](mailto:danmakupie@outlook.com) 联系我们 1[联系我们](mailto:danmakupie@outlook.com?subject=弹幕派意见反馈) 联系我们 2. 链接可以跳转到本页面的另一个地方吗？在Github里是支持跳转到页面里的另一个标题的：1[八、引用](#八、引用) 八、引用 这样就可以跳转到“八、引用”这个标题了。这可以用来做目录。 所有用#标记的标题都可以。GitHub对中文的支持不太好。 3. 参考式链接一些链接可能要在文档里重复多次，每次都要写一遍链接太费事了。因此就有参考式链接。参考式的链接是在链接文字的括号后面再接上另一个方括号，而在第二个方括号里面要填入用以辨识链接的标记： 1This is [an example][1] reference-style link. 接着，在文件的任意处，你可以把这个标记的链接内容定义出来： 1[1]: http://www.danmakupie.com \"弹幕派\" This is an example reference-style link. 4. 引用可以嵌套引用吗？可以，通过多个&gt;可以不断嵌套： 12345&gt; This is the first level of quoting.&gt;&gt; &gt; This is nested blockquote.&gt;&gt; Back to the first level. This is the first level of quoting. This is nested blockquote. Back to the first level. 引用里还可以有其他标记： 12345678&gt; ## 这是一个标题。&gt; &gt; 1. 这是第一行列表项。&gt; 2. 这是第二行列表项。&gt; &gt; 给出一些例子代码：&gt; &gt; return shell_exec(\"echo $input | $markdown_script\"); 这是一个标题。 这是第一行列表项。 这是第二行列表项。 给出一些例子代码： return shell_exec(&quot;echo $input | $markdown_script&quot;); 5. 如何输入上标和下标？用&lt;sub&gt;和&lt;/sub&gt;包括下标文字： 1H&lt;sub&gt;2&lt;/sub&gt;O H2O 用&lt;sup&gt;和&lt;/sup&gt;包括上标文字： 1X&lt;sup&gt;2&lt;/sup&gt;+2x+1 = 0 X2+2x+1 = 0 6. 代码块如何进行语法高亮？在```之后加上语言的标记，例如： ``` c 可以标记C语言。 具体各语言高亮支持请查看highlight.js - CSS classes reference 参考资料http://wowubuntu.com/markdown/ 延伸阅读Learning-Markdown (Markdown 入门参考) 这里有讲怎么用Markdown画表格（虽然我从来没画出来过）。","link":"/2016/11/01/How-to-Write-Markdown/"},{"title":"用Markdown写公式","text":"在写课堂报告的时候，用Latex会比较笨重，用Word插入公式又太麻烦，用Markdown则恰如其分，因此这篇文章主要涉及如何在Markdown中使用Mathjax，参考LaTeX语法来书写公式。公式可以在Typora里导出成PDF文档。 一、公式使用参考 插入公式 上下标 括号和分隔符 输入分数 输入开方 省略号 输入矢量 输入积分 极限运算 累加、累乘运算 希腊字母 其他特殊字符 字体转换 大括号和行标的使用 其他命令 二、矩阵使用参考 无框矩阵 边框矩阵 带省略符号的矩阵 带分割符号的矩阵 行中矩阵 三、方程式序列使用参考 方程式序列 在一个方程式序列的每一行中注明原因 四、条件表达式使用参考 条件表达式 左侧对齐的条件表达式 使条件表达式适配行高 五、数组与表格使用参考 数组或表格 嵌套的数组或表格 方程组 六、连分数使用参考 连分式 七、交换图表使用参考 交换图表 八、一些特殊的注意事项 Reference 一、公式使用参考插入公式$\\LaTeX{}$的数学公式有两种：行中公式和独立公式。行中公式放在文中与其它文字混编，独立公式单独成行。 行中公式可以用如下方法表示： 1$ 数学公式 $ 独立公式可以用如下方法表示： 1$$ 数学公式 $$ 自动编号的公式可以用如下方法表示： 若需要手动编号，参见 大括号和行标的使用。 1234\\begin{equation}数学公式\\label{eq:当前公式名}\\end{equation} 自动编号后的公式可在全文任意处使用\\eqref{eq:公式名}语句引用。 例： 1$ J_\\alpha(x) = \\sum_{m=0}^\\infty \\frac{(-1)^m}{m! \\Gamma (m + \\alpha + 1)} {\\left({ \\frac{x}{2} }\\right)}^{2m + \\alpha} \\text {，行内公式示例} $ 行内公式：$ J_\\alpha(x) = \\sum_{m=0}^\\infty \\frac{(-1)^m}{m! \\Gamma (m + \\alpha + 1)} {\\left({ \\frac{x}{2} }\\right)}^{2m + \\alpha} \\text {，行内公式示例} $ 例： 1$$ J_\\alpha(x) = \\sum_{m=0}^\\infty \\frac{(-1)^m}{m! \\Gamma (m + \\alpha + 1)} {\\left({ \\frac{x}{2} }\\right)}^{2m + \\alpha} \\text {，独立公式示例} $$ $$ J_\\alpha(x) = \\sum_{m=0}^\\infty \\frac{(-1)^m}{m! \\Gamma (m + \\alpha + 1)} {\\left({ \\frac{x}{2} }\\right)}^{2m + \\alpha} \\text {，独立公式示例} $$ 例： 123\\begin{equation}E=mc^2 \\text{，自动编号公式示例}\\end{equation} $$\\begin{equation}E=mc^2 \\text{，自动编号公式示例}\\end{equation}$$ 上下标^ 表示上标, _ 表示下标。如果上下标的内容多于一个字符，需要用 {} 将这些内容括成一个整体。上下标可以嵌套，也可以同时使用。 例： 1$$ x^{y^z}=(1+{\\rm e}^x)^{-2xy^w} $$ $$ x^{y^z}=(1+{\\rm e}^x)^{-2xy^w} $$ 另外，如果要在左右两边都有上下标，可以用 \\sideset 命令。 例： 1$$ \\sideset{^1_2}{^3_4}\\bigotimes $$ $$ \\sideset{^1_2}{^3_4}\\bigotimes $$ 括号和分隔符()、[] 和 | 表示符号本身，使用 \\{\\} 来表示 {} 。当要显示大号的括号或分隔符时，要用 \\left 和 \\right 命令。 一些特殊的括号： 输入 显示 输入 显示 \\langle $\\langle$ \\rangle $\\rangle$ \\lceil $\\lceil$ \\rceil $\\rceil$ \\lfloor $\\lfloor$ \\rfloor $\\rfloor$ \\lbrace $\\lbrace$ \\rbrace $\\rbrace$ 例：1$$ f(x,y,z) = 3y^2z \\left( 3+\\frac{7x+5}{1+y^2} \\right) $$ $$ f(x,y,z) = 3y^2z \\left( 3+\\frac{7x+5}{1+y^2} \\right) $$ 有时候要用 \\left. 或 \\right. 进行匹配而不显示本身。 例：1$$ \\left \\frac{{\\rm d}u}{{\\rm d}x} \\right | _{x=0} $$ 输入分数通常使用 \\frac {分子} {分母} 命令产生一个分数，分数可嵌套。便捷情况可直接输入 \\frac ab 来快速生成一个 $\\frac ab$。如果分式很复杂，亦可使用 分子 \\over 分母 命令，此时分数仅有一层。 例：1$$\\frac{a-1}{b-1} \\quad and \\quad {a+1\\over b+1}$$ $$\\frac{a-1}{b-1} \\quad and \\quad {a+1\\over b+1}$$ 输入开方使用 \\sqrt [根指数，省略时为2] {被开方数} 命令输入开方。 例：1$$\\sqrt{2} \\quad and \\quad \\sqrt[n]{3}$$ $$\\sqrt{2} \\quad and \\quad \\sqrt[n]{3}$$ 省略号数学公式中常见的省略号有两种，\\ldots 表示与文本底线对齐的省略号，\\cdots 表示与文本中线对齐的省略号。 例：1$$f(x_1,x_2,\\underbrace{\\ldots}_{\\rm ldots} ,x_n) = x_1^2 + x_2^2 + \\underbrace{\\cdots}_{\\rm cdots} + x_n^2$$ $$f(x_1,x_2,\\underbrace{\\ldots}_{\\rm ldots} ,x_n) = x_1^2 + x_2^2 + \\underbrace{\\cdots}_{\\rm cdots} + x_n^2$$ 输入矢量使用 \\vec{矢量} 来自动产生一个矢量。也可以使用 \\overrightarrow 等命令自定义字母上方的符号。 例：1$$\\vec{a} \\cdot \\vec{b}=0$$ $$\\vec{a} \\cdot \\vec{b}=0$$ 例：1$$\\overleftarrow{xy} \\quad and \\quad \\overleftrightarrow{xy} \\quad and \\quad \\overrightarrow{xy}$$ $$\\overleftarrow{xy} \\quad and \\quad \\overleftrightarrow{xy} \\quad and \\quad \\overrightarrow{xy}$$ 输入积分使用 \\int_积分下限^积分上限 {被积表达式} 来输入一个积分。 例：1$$\\int_0^1 {x^2} \\,{\\rm d}x$$ $$\\int_0^1 {x^2} \\,{\\rm d}x$$ 本例中 \\, 和 {\\rm d} 部分可省略，但建议加入，能使式子更美观。 极限运算使用 \\lim_{变量 \\to 表达式} 表达式 来输入一个极限。如有需求，可以更改 \\to 符号至任意符号。 例：1$$ \\lim_{n \\to +\\infty} \\frac{1}{n(n+1)} \\quad and \\quad \\lim_{x\\leftarrow{示例}} \\frac{1}{n(n+1)} $$ $$\\lim_{n \\to +\\infty} \\frac{1}{n(n+1)} \\quad and \\quad \\lim_{x\\leftarrow{示例}} \\frac{1}{n(n+1)}$$ 累加、累乘运算使用 \\sum_{下标表达式}^{上标表达式} {累加表达式} 来输入一个累加。与之类似，使用 \\prod \\bigcup \\bigcap 来分别输入累乘、并集和交集。此类符号在行内显示时上下标表达式将会移至右上角和右下角。 例：1$$\\sum_{i=1}^n \\frac{1}{i^2} \\quad and \\quad \\prod_{i=1}^n \\frac{1}{i^2} \\quad and \\quad \\bigcup_{i=1}^{2} R$$ $$\\sum_{i=1}^n \\frac{1}{i^2} \\quad and \\quad \\prod_{i=1}^n \\frac{1}{i^2} \\quad and \\quad \\bigcup_{i=1}^{2} R$$ 希腊字母输入 \\小写希腊字母英文全称 和 \\首字母大写希腊字母英文全称 来分别输入小写和大写希腊字母。对于大写希腊字母与现有字母相同的，直接输入大写字母即可。 输入 显示 输入 显示 输入 显示 输入 显示 \\alpha $\\alpha$ A $A$ \\beta $\\beta$ B $B$ \\gamma $\\gamma$ \\Gamma $\\Gamma$ \\delta $\\delta$ \\Delta $\\Delta$ \\epsilon $\\epsilon$ E $E$ \\zeta $\\zeta$ Z $Z$ \\eta $\\eta$ H $H$ \\theta $\\theta$ \\Theta $\\Theta$ \\iota $\\iota$ I $I$ \\kappa $\\kappa$ K $K$ \\lambda $\\lambda$ \\Lambda $\\Lambda$ \\mu $\\mu$ M $M$ \\nu $\\nu$ N $N$ \\xi $\\xi$ \\Xi $\\Xi$ o $o$ O $O$ \\pi $\\pi$ \\Pi $\\Pi$ \\rho $\\rho$ P $P$ \\sigma $\\sigma$ \\Sigma $\\Sigma$ \\tau $\\tau$ T $T$ \\upsilon $\\upsilon$ \\Upsilon $\\Upsilon$ \\phi $\\phi$ \\Phi $\\Phi$ \\chi $\\chi$ X $X$ \\psi $\\psi$ \\Psi $\\Psi$ \\omega $\\omega$ \\Omega $\\Omega$ 部分字母有变量专用形式，以 \\var- 开头。 小写形式 大写形式 变量形式 显示 \\epsilon E \\varepsilon $\\epsilon \\mid E \\mid \\varepsilon$ \\theta \\Theta \\vartheta $\\theta \\mid \\Theta \\mid \\vartheta$ \\rho P \\varrho $\\rho \\mid P \\mid \\varrho$ \\sigma \\Sigma \\varsigma $\\sigma \\mid \\Sigma \\mid \\varsigma$ \\phi \\Phi \\varphi $\\phi \\mid \\Phi \\mid \\varphi$ 其他特殊字符若需要显示更大或更小的字符，在符号前插入 \\large 或 \\small 命令。 若找不到需要的符号，使用$\\rm{Detexify^2}$来画出想要的符号。 (1) 关系运算符 输入 显示 输入 显示 输入 显示 输入 显示 \\pm $\\pm$ \\times $\\times$ \\div $\\div$ \\mid $\\mid$ \\nmid $\\nmid$ \\cdot $\\cdot$ \\circ $\\circ$ \\ast $\\ast$ \\bigodot $\\bigodot$ \\bigotimes $\\bigotimes$ \\bigoplus $\\bigoplus$ \\leq $\\leq$ \\geq $\\geq$ \\neq $\\neq$ \\approx $\\approx$ \\equiv $\\equiv$ \\sum $\\sum$ \\prod $\\prod$ \\coprod $\\coprod$ \\backslash $\\backslash$ (2) 集合运算符 输入 显示 输入 显示 输入 显示 \\emptyset $\\emptyset$ \\in $\\in$ \\notin $\\notin$ \\subset $\\subset$ \\supset $\\supset$ \\subseteq $\\subseteq$ \\supseteq $\\supseteq$ \\bigcap $\\bigcap$ \\bigcup $\\bigcup$ \\bigvee $\\bigvee$ \\bigwedge $\\bigwedge$ \\biguplus $\\biguplus$ (3) 对数运算符 输入 显示 输入 显示 输入 显示 \\log $\\log$ \\lg $\\lg$ \\ln $\\ln$ (4) 三角运算符 输入 显示 输入 显示 输入 显示 30^\\circ $30^\\circ$ \\bot $\\bot$ \\angle A $\\angle A$ \\sin $\\sin$ \\cos $\\cos$ \\tan $\\tan$ \\csc $\\csc$ \\sec $\\sec$ \\cot $\\cot$ (5) 微积分运算符 输入 显示 输入 显示 输入 显示 \\int $\\int$ \\iint $\\iint$ \\iiint $\\iiint$ \\iiiint $\\iiiint$ \\oint $\\oint$ \\prime $\\prime$ \\lim $\\lim$ \\infty $\\infty$ \\nabla $\\nabla$ (6) 逻辑运算符 输入 显示 输入 显示 输入 显示 \\because $\\because$ \\therefore $\\therefore$ \\forall $\\forall$ \\exists $\\exists$ \\not\\subset $\\not\\subset$ \\not&lt; $\\not&lt;$ \\not&gt; $\\not&gt;$ \\not= $\\not=$ (7) 戴帽符号 输入 显示 输入 显示 \\hat{xy} $\\hat{xy}$ \\widehat{xyz} $\\widehat{xyz}$ \\tilde{xy} $\\tilde{xy}$ \\widetilde{xyz} $\\widetilde{xyz}$ \\check{x} $\\check{x}$ \\breve{y} $\\breve{y}$ \\grave{x} $\\grave{x}$ \\acute{y} $\\acute{y}$ (8) 连线符号 输入 显示 \\fbox{a+b+c+d} $\\fbox{a+b+c+d}$ \\overleftarrow{a+b+c+d} $\\overleftarrow{a+b+c+d}$ \\overrightarrow{a+b+c+d} $\\overrightarrow{a+b+c+d}$ \\overleftrightarrow{a+b+c+d} $\\overleftrightarrow{a+b+c+d}$ \\underleftarrow{a+b+c+d} $\\underleftarrow{a+b+c+d}$ \\underrightarrow{a+b+c+d} $\\underrightarrow{a+b+c+d}$ \\underleftrightarrow{a+b+c+d} $\\underleftrightarrow{a+b+c+d}$ \\overline{a+b+c+d} $\\overline{a+b+c+d}$ \\underline{a+b+c+d} $\\underline{a+b+c+d}$ \\overbrace{a+b+c+d}^{Sample} $\\overbrace{a+b+c+d}^{Sample}$ \\underbrace{a+b+c+d}_{Sample} $\\underbrace{a+b+c+d}_{Sample}$ \\overbrace{a+\\underbrace{b+c}_{1.0}+d}^{2.0} $\\overbrace{a+\\underbrace{b+c}_{1.0}+d}^{2.0}$ \\underbrace{a\\cdot a\\cdots a}_{b\\text{ times}} $\\underbrace{a\\cdot a\\cdots a}_{b\\text{ times}}$ (9) 箭头符号 推荐使用符号： 输入 显示 输入 显示 输入 显示 \\to $\\to$ \\mapsto $\\mapsto$ \\implies $\\implies$ \\iff $\\iff$ \\impliedby $\\impliedby$ 其它可用符号： 输入 显示 输入 显示 \\uparrow $\\uparrow$ \\Uparrow $\\Uparrow$ \\downarrow $\\downarrow$ \\Downarrow $\\Downarrow$ \\leftarrow $\\leftarrow$ \\Leftarrow $\\Leftarrow$ \\rightarrow $\\rightarrow$ \\Rightarrow $\\Rightarrow$ \\leftrightarrow $\\leftrightarrow$ \\Leftrightarrow $\\Leftrightarrow$ \\longleftarrow $\\longleftarrow$ \\Longleftarrow $\\Longleftarrow$ \\longrightarrow $\\longrightarrow$ \\Longrightarrow $\\Longrightarrow$ \\longleftrightarrow $\\longleftrightarrow$ \\Longleftrightarrow $\\Longleftrightarrow$ 字体转换若要对公式的某一部分字符进行字体转换，可以用 {\\字体 {需转换的部分字符}} 命令，其中 \\字体 部分可以参照下表选择合适的字体。一般情况下，公式默认为意大利体 。 示例中 全部大写 的字体仅大写可用。 输入 说明 显示 输入 说明 显示 \\rm 罗马体 $\\rm{Sample}$ \\cal 花体 $\\cal{Sample}$ \\it 意大利体 $\\it{Sample}$ \\Bbb 黑板粗体 $\\Bbb{Sample}$ \\bf 粗体 $\\bf{Sample}$ \\mit 数学斜体 $\\mit{Sample}$ \\sf 等线体 $\\sf{Sample}$ \\scr 手写体 $\\scr{Sample}$ \\tt 打字机体 $\\tt{Sample}$ \\frak 旧德式字体 $\\frak{Sample}$ 转换字体十分常用，例如在积分中： 例：1234567$$\\begin{array}{cc}\\mathrm{Bad} &amp; \\mathrm{Better} \\\\\\hline \\\\\\int_0^1 x^2 dx &amp; \\int_0^1 x^2 \\,{\\rm d}x\\end{array}$$ $$\\begin{array}{cc}\\mathrm{Bad} &amp; \\mathrm{Better} \\\\\\hline \\\\\\int_0^1 x^2 dx &amp; \\int_0^1 x^2 \\,{\\rm d}x\\end{array}$$ 注意比较两个式子间$dx$与${\\rm d}x$的不同。使用 \\operatorname 命令也可以达到相同的效果，详见 定义新的符号 \\operatorname 定义新的符号 \\operatorname) 。 大括号和行标的使用使用 \\left 和 \\right 来创建自动匹配高度的 (圆括号)，[方括号] 和 {花括号} 。在每个公式末尾前使用 \\tag{行标} 来实现行标。 例：123456789101112131415$$f\\left( \\left[ \\frac{ 1+\\left\\{x,y\\right\\} }{ \\left( \\frac{x}{y}+\\frac{y}{x} \\right) \\left(u+1\\right) }+a \\right]^{3/2}\\right)\\tag{行标}$$ $$f\\left( \\left[ \\frac{ 1+\\left\\{x,y\\right\\} }{ \\left( \\frac{x}{y}+\\frac{y}{x} \\right) \\left(u+1\\right) }+a \\right]^{3/2}\\right)\\tag{行标}$$ 如果你需要在不同的行显示对应括号，可以在每一行对应处使用 \\left. 或 \\right. 来放一个”影子”括号： 例：123456$$\\begin{aligned}a=&amp;\\left(1+2+3+ \\cdots \\right. \\\\&amp; \\cdots+ \\left. \\infty-2+\\infty-1+\\infty\\right)\\end{aligned}$$ $$\\begin{aligned}a=&amp;\\left(1+2+3+ \\cdots \\right. \\&amp; \\cdots+ \\left. \\infty-2+\\infty-1+\\infty\\right)\\end{aligned}$$ 如果你需要将行内显示的分隔符也变大，可以使用 \\middle 命令： 例：123456789$$\\left\\langle q\\middle\\| \\frac{\\frac{x}{y}}{\\frac{u}{v}}\\middle| p \\right\\rangle$$ $$\\left\\langle q\\middle| \\frac{\\frac{x}{y}}{\\frac{u}{v}}\\middle| p\\right\\rangle$$ 其他命令(1) 定义新的符号 \\operatorname查询 关于此命令的定义 和 关于此命令的讨论 来进一步了解此命令。 例：：1$$ \\operatorname{Symbol} A $$ $$ \\operatorname{Symbol} A $$ (2) 添加注释文字 \\text在 \\text {文字} 中仍可以使用 $公式$ 插入其它公式。 例：：1$$ f(n)= \\begin{cases} n/2, &amp; \\text {if $n$ is even} \\\\ 3n+1, &amp; \\text{if $n$ is odd} \\end{cases} $$ $$ f(n)= \\begin{cases} n/2, &amp; \\text {if $n$ is even} \\\\ 3n+1, &amp; \\text{if $n$ is odd} \\end{cases} $$ (3) 在字符间加入空格有四种宽度的空格可以使用： \\,、\\;、\\quad 和 \\qquad 。 例：：1$$ a \\, b \\mid a \\; b \\mid a \\quad b \\mid a \\qquad b $$ $$ a \\, b \\mid a \\; b \\mid a \\quad b \\mid a \\qquad b $$ 当然，使用 \\text {n个空格} 也可以达到同样效果。 (4) 更改文字颜色使用 \\color{颜色}{文字} 来更改特定的文字颜色。更改文字颜色 需要浏览器支持 ，如果浏览器不知道你所需的颜色，那么文字将被渲染为黑色。 对于较旧的浏览器（HTML4与CSS2），以下颜色是被支持的： 输入 显示 输入 显示 black $\\color{black}{text}$ grey $\\color{grey}{text}$ silver $\\color{silver}{text}$ white $\\color{white}{text}$ maroon $\\color{maroon}{text}$ red $\\color{red}{text}$ yellow $\\color{yellow}{text}$ lime $\\color{lime}{text}$ olive $\\color{olive}{text}$ green $\\color{green}{text}$ teal $\\color{teal}{text}$ auqa $\\color{auqa}{text}$ blue $\\color{blue}{text}$ navy $\\color{navy}{text}$ purple $\\color{purple}{text}$ fuchsia $\\color{fuchsia}{text}$ 对于较新的浏览器（HTML5与CSS3），额外的124种颜色将被支持： 输入 \\color #rgb text 来自定义更多的颜色，其中 #rgb 的 r g b 可输入 0-9 和 a-f 来表示红色、绿色和蓝色的纯度（饱和度）。 例：：12345678910111213$$\\begin{array}{|rrrrrrrr|}\\hline\\verb+#000+ &amp; \\color{#000}{text} &amp; &amp; &amp;\\verb+#00F+ &amp; \\color{#00F}{text} &amp; &amp; \\\\&amp; &amp; \\verb+#0F0+ &amp; \\color{#0F0}{text} &amp;&amp; &amp; \\verb+#0FF+ &amp; \\color{#0FF}{text} \\\\\\verb+#F00+ &amp; \\color{#F00}{text} &amp; &amp; &amp;\\verb+#F0F+ &amp; \\color{#F0F}{text} &amp; &amp; \\\\&amp; &amp; \\verb+#FF0+ &amp; \\color{#FF0}{text} &amp;&amp; &amp; \\verb+#FFF+ &amp; \\color{#FFF}{text} \\\\\\hline\\end{array}$$ 例：： 1234567891011121314151617181920$$\\begin{array}{|rrrrrrrr|}\\hline\\verb+#000+ &amp; \\color{#000}{text} &amp; \\verb+#005+ &amp; \\color{#005}{text} &amp; \\verb+#00A+ &amp; \\color{#00A}{text} &amp; \\verb+#00F+ &amp; \\color{#00F}{text} \\\\\\verb+#500+ &amp; \\color{#500}{text} &amp; \\verb+#505+ &amp; \\color{#505}{text} &amp; \\verb+#50A+ &amp; \\color{#50A}{text} &amp; \\verb+#50F+ &amp; \\color{#50F}{text} \\\\\\verb+#A00+ &amp; \\color{#A00}{text} &amp; \\verb+#A05+ &amp; \\color{#A05}{text} &amp; \\verb+#A0A+ &amp; \\color{#A0A}{text} &amp; \\verb+#A0F+ &amp; \\color{#A0F}{text} \\\\\\verb+#F00+ &amp; \\color{#F00}{text} &amp; \\verb+#F05+ &amp; \\color{#F05}{text} &amp; \\verb+#F0A+ &amp; \\color{#F0A}{text} &amp; \\verb+#F0F+ &amp; \\color{#F0F}{text} \\\\\\hline\\verb+#080+ &amp; \\color{#080}{text} &amp; \\verb+#085+ &amp; \\color{#085}{text} &amp; \\verb+#08A+ &amp; \\color{#08A}{text} &amp; \\verb+#08F+ &amp; \\color{#08F}{text} \\\\\\verb+#580+ &amp; \\color{#580}{text} &amp; \\verb+#585+ &amp; \\color{#585}{text} &amp; \\verb+#58A+ &amp; \\color{#58A}{text} &amp; \\verb+#58F+ &amp; \\color{#58F}{text} \\\\\\verb+#A80+ &amp; \\color{#A80}{text} &amp; \\verb+#A85+ &amp; \\color{#A85}{text} &amp; \\verb+#A8A+ &amp; \\color{#A8A}{text} &amp; \\verb+#A8F+ &amp; \\color{#A8F}{text} \\\\\\verb+#F80+ &amp; \\color{#F80}{text} &amp; \\verb+#F85+ &amp; \\color{#F85}{text} &amp; \\verb+#F8A+ &amp; \\color{#F8A}{text} &amp; \\verb+#F8F+ &amp; \\color{#F8F}{text} \\\\\\hline\\verb+#0F0+ &amp; \\color{#0F0}{text} &amp; \\verb+#0F5+ &amp; \\color{#0F5}{text} &amp; \\verb+#0FA+ &amp; \\color{#0FA}{text} &amp; \\verb+#0FF+ &amp; \\color{#0FF}{text} \\\\\\verb+#5F0+ &amp; \\color{#5F0}{text} &amp; \\verb+#5F5+ &amp; \\color{#5F5}{text} &amp; \\verb+#5FA+ &amp; \\color{#5FA}{text} &amp; \\verb+#5FF+ &amp; \\color{#5FF}{text} \\\\\\verb+#AF0+ &amp; \\color{#AF0}{text} &amp; \\verb+#AF5+ &amp; \\color{#AF5}{text} &amp; \\verb+#AFA+ &amp; \\color{#AFA}{text} &amp; \\verb+#AFF+ &amp; \\color{#AFF}{text} \\\\\\verb+#FF0+ &amp; \\color{#FF0}{text} &amp; \\verb+#FF5+ &amp; \\color{#FF5}{text} &amp; \\verb+#FFA+ &amp; \\color{#FFA}{text} &amp; \\verb+#FFF+ &amp; \\color{#FFF}{text} \\\\\\hline\\end{array}$$ (5) 添加删除线使用删除线功能必须声明 $$ 符号。 在公式内使用 \\require{cancel} 来允许 片段删除线 的显示。声明片段删除线后，使用 \\cancel{字符}、\\bcancel{字符}、\\xcancel{字符} 和 \\cancelto{字符} 来实现各种片段删除线效果。 例：：12345678910$$\\require{cancel}\\begin{array}{rl}\\verb|y+\\cancel{x}| &amp; y+\\cancel{x} \\\\\\verb|\\cancel{y+x}| &amp; \\cancel{y+x} \\\\\\verb|y+\\bcancel{x}| &amp; y+\\bcancel{x} \\\\\\verb|y+\\xcancel{x}| &amp; y+\\xcancel{x} \\\\\\verb|y+\\cancelto{0}{x}| &amp; y+\\cancelto{0}{x} \\\\\\verb+\\frac{1\\cancel9}{\\cancel95} = \\frac15+&amp; \\frac{1\\cancel9}{\\cancel95} = \\frac15 \\\\\\end{array}$$ $$\\require{cancel}\\begin{array}{rl}\\verb|y+\\cancel{x}| &amp; y+\\cancel{x} \\\\\\verb|\\cancel{y+x}| &amp; \\cancel{y+x} \\\\\\verb|y+\\bcancel{x}| &amp; y+\\bcancel{x} \\\\\\verb|y+\\xcancel{x}| &amp; y+\\xcancel{x} \\\\\\verb|y+\\cancelto{0}{x}| &amp; y+\\cancelto{0}{x} \\\\\\verb+\\frac{1\\cancel9}{\\cancel95} = \\frac15+&amp; \\frac{1\\cancel9}{\\cancel95} = \\frac15 \\\\\\end{array}$$ 使用 \\require{enclose} 来允许 整段删除线 的显示。声明整段删除线后，使用 \\enclose{删除线效果}{字符} 来实现各种整段删除线效果。其中，删除线效果有 horizontalstrike、verticalstrike、updiagonalstrike 和 downdiagonalstrike，可叠加使用。 例：：12345678910$$\\require{enclose}\\begin{array}{rl}\\verb|\\enclose{horizontalstrike}{x+y}| &amp; \\enclose{horizontalstrike}{x+y}\\\\\\verb|\\enclose{verticalstrike}{\\frac xy}| &amp; \\enclose{verticalstrike}{\\frac xy}\\\\\\verb|\\enclose{updiagonalstrike}{x+y}| &amp; \\enclose{updiagonalstrike}{x+y}\\\\\\verb|\\enclose{downdiagonalstrike}{x+y}| &amp; \\enclose{downdiagonalstrike}{x+y}\\\\\\verb|\\enclose{horizontalstrike,updiagonalstrike}{x+y}| &amp; \\enclose{horizontalstrike,updiagonalstrike}{x+y}\\\\\\end{array}$$ $$\\require{enclose}\\begin{array}{rl}\\verb|\\enclose{horizontalstrike}{x+y}| &amp; \\enclose{horizontalstrike}{x+y}\\\\\\verb|\\enclose{verticalstrike}{\\frac xy}| &amp; \\enclose{verticalstrike}{\\frac xy}\\\\\\verb|\\enclose{updiagonalstrike}{x+y}| &amp; \\enclose{updiagonalstrike}{x+y}\\\\\\verb|\\enclose{downdiagonalstrike}{x+y}| &amp; \\enclose{downdiagonalstrike}{x+y}\\\\\\verb|\\enclose{horizontalstrike,updiagonalstrike}{x+y}| &amp; \\enclose{horizontalstrike,updiagonalstrike}{x+y}\\\\\\end{array}$$此外， \\enclose 命令还可以产生包围的边框和圆等，参见 MathML Menclose Documentation 以查看更多效果。 二、矩阵使用参考无框矩阵在开头使用 begin{matrix}，在结尾使用 end{matrix}，在中间插入矩阵元素，每个元素之间插入 &amp; ，并在每行结尾处使用 \\\\ 。使用矩阵时必须声明 $ 或 $$ 符号。 例：：1234567$$\\begin{matrix}1 &amp; x &amp; x^2 \\\\1 &amp; y &amp; y^2 \\\\1 &amp; z &amp; z^2 \\\\\\end{matrix} $$ $$\\begin{matrix}1 &amp; x &amp; x^2 \\\\1 &amp; y &amp; y^2 \\\\1 &amp; z &amp; z^2 \\\\\\end{matrix}$$ 边框矩阵在开头将 matrix 替换为 pmatrix bmatrix Bmatrix vmatrix Vmatrix 。 例：：123456$ \\begin{matrix} 1 &amp; 2 \\\\ 3 &amp; 4 \\\\ \\end{matrix} $$ \\begin{pmatrix} 1 &amp; 2 \\\\ 3 &amp; 4 \\\\ \\end{pmatrix} $$ \\begin{bmatrix} 1 &amp; 2 \\\\ 3 &amp; 4 \\\\ \\end{bmatrix} $$ \\begin{Bmatrix} 1 &amp; 2 \\\\ 3 &amp; 4 \\\\ \\end{Bmatrix} $$ \\begin{vmatrix} 1 &amp; 2 \\\\ 3 &amp; 4 \\\\ \\end{vmatrix} $$ \\begin{Vmatrix} 1 &amp; 2 \\\\ 3 &amp; 4 \\\\ \\end{Vmatrix} $ matrix pmatrix bmatrix Bmatrix vmatrix Vmatrix $ \\begin{matrix} 1 &amp; 2 \\\\ 3 &amp; 4 \\\\ \\end{matrix} $ $ \\begin{pmatrix} 1 &amp; 2 \\\\ 3 &amp; 4 \\\\ \\end{pmatrix} $ $ \\begin{bmatrix} 1 &amp; 2 \\\\ 3 &amp; 4 \\\\ \\end{bmatrix} $ $ \\begin{matrix} 1 &amp; 2 \\\\ 3 &amp; 4 \\\\ \\end{matrix} $ $ \\begin{vmatrix} 1 &amp; 2 \\\\ 3 &amp; 4 \\\\ \\end{vmatrix} $ $ \\begin{Vmatrix} 1 &amp; 2 \\\\ 3 &amp; 4 \\\\ \\end{Vmatrix} $ 带省略符号的矩阵使用 \\cdots , \\ddots , \\vdots 来输入省略符号。 例：：12345678$$\\begin{pmatrix}1 &amp; a_1 &amp; a_1^2 &amp; \\cdots &amp; a_1^n \\\\1 &amp; a_2 &amp; a_2^2 &amp; \\cdots &amp; a_2^n \\\\\\vdots &amp; \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\1 &amp; a_m &amp; a_m^2 &amp; \\cdots &amp; a_m^n \\\\\\end{pmatrix}$$ $$\\begin{pmatrix}1 &amp; a_1 &amp; a_1^2 &amp; \\cdots &amp; a_1^n \\\\1 &amp; a_2 &amp; a_2^2 &amp; \\cdots &amp; a_2^n \\\\\\vdots &amp; \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\1 &amp; a_m &amp; a_m^2 &amp; \\cdots &amp; a_m^n \\\\\\end{pmatrix}$$ 带分割符号的矩阵详见”数组使用参考“。 例：：12345678$$\\left[ \\begin{array}{cc|c} 1&amp;2&amp;3\\\\ 4&amp;5&amp;6 \\end{array}\\right]$$ $$\\left[ \\begin{array}{cc|c} 1&amp;2&amp;3\\\\ 4&amp;5&amp;6 \\end{array}\\right]$$ 其中 cc|c 代表在一个三列矩阵中的第二和第三列之间插入分割线。 行中矩阵若想在一行内显示矩阵，使用\\bigl(\\begin{smallmatrix} ... \\end{smallmatrix}\\bigr)。 例：：1这是一个行中矩阵的示例 $\\bigl( \\begin{smallmatrix} a &amp; b \\\\ c &amp; d \\end{smallmatrix} \\bigr)$ 。 这是一个行中矩阵的示例 $\\bigl( \\begin{smallmatrix} a &amp; b \\\\ c &amp; d \\end{smallmatrix} \\bigr)$ 。 三、方程式序列使用参考方程式序列人们经常想要一列整齐且居中的方程式序列。使用 \\begin{align}…\\end{align} 来创造一列方程式，其中在每行结尾处使用 \\\\ 。使用方程式序列无需声明公式符号 $ 或 $$ 。 请注意 {align} 语句是 自动编号 的。 例：：123456789$$\\begin{align}\\sqrt{37} &amp; = \\sqrt{\\frac{73^2-1}{12^2}} \\\\ &amp; = \\sqrt{\\frac{73^2}{12^2}\\cdot\\frac{73^2-1}{73^2}} \\\\ &amp; = \\sqrt{\\frac{73^2}{12^2}}\\sqrt{\\frac{73^2-1}{73^2}} \\\\ &amp; = \\frac{73}{12}\\sqrt{1 - \\frac{1}{73^2}} \\\\&amp; \\approx \\frac{73}{12}\\left(1 - \\frac{1}{2\\cdot73^2}\\right)\\end{align}$$ $$\\begin{align}\\sqrt{37} &amp; = \\sqrt{\\frac{73^2-1}{12^2}} \\\\&amp; = \\sqrt{\\frac{73^2}{12^2}\\cdot\\frac{73^2-1}{73^2}} \\\\&amp; = \\sqrt{\\frac{73^2}{12^2}}\\sqrt{\\frac{73^2-1}{73^2}} \\\\&amp; = \\frac{73}{12}\\sqrt{1 - \\frac{1}{73^2}} \\\\&amp; \\approx \\frac{73}{12}\\left(1 - \\frac{1}{2\\cdot73^2}\\right)\\end{align}$$ 本例中每行公式的编号续自 如何插入公式 中的自动编号公式 。 在一个方程式序列的每一行中注明原因在 {align} 中灵活组合 \\text 和 \\tag 语句。\\tag 语句编号优先级高于自动编号。 例：：1234567$$\\begin{align} v + w &amp; = 0 &amp;\\text{Given} \\tag 1\\\\ -w &amp; = -w + 0 &amp; \\text{additive identity} \\tag 2\\\\ -w + 0 &amp; = -w + (v + w) &amp; \\text{equations $(1)$ and $(2)$} \\end{align}$$ $$\\begin{align}v + w &amp; = 0 &amp;\\text{Given} \\tag 1\\\\-w &amp; = -w + 0 &amp; \\text{additive identity} \\tag 2\\\\-w + 0 &amp; = -w + (v + w) &amp; \\text{equations $(1)$ and $(2)$}\\end{align}$$ 本例中第一、第二行的自动编号被 \\tag 语句覆盖，第三行的编号为自动编号。 四、条件表达式使用参考条件表达式使用 begin{cases} 来创造一组条件表达式，在每一行条件中插入 &amp; 来指定需要对齐的内容，并在每一行结尾处使用 \\\\，以 end{cases} 结束。条件表达式无需声明 $ 或 $$ 符号。 例：：1234567$$f(n) = \\begin{cases}n/2, &amp; \\text{if $n$ is even} \\\\3n+1, &amp; \\text{if $n$ is odd} \\end{cases}$$ $$f(n) =\\begin{cases}n/2, &amp; \\text{if $n$ is even} \\\\3n+1, &amp; \\text{if $n$ is odd}\\end{cases}$$ 左侧对齐的条件表达式若想让文字在 左侧对齐显示 ，则有如下方式： 例：：123456789$$\\left.\\begin{array}{l}\\text{if $n$ is even:}&amp;n/2\\\\\\text{if $n$ is odd:}&amp;3n+1\\end{array} \\right\\} =f(n)$$ $$\\left.\\begin{array}{l}\\text{if $n$ is even:}&amp;n/2\\\\\\text{if $n$ is odd:}&amp;3n+1\\end{array}\\right\\}=f(n)$$ 使条件表达式适配行高在一些情况下，条件表达式中某些行的行高为非标准高度，此时使用 \\\\[2ex] 语句代替该行末尾的 \\\\ 来让编辑器适配。 例：： 不适配[2ex]1234567$$f(n) = \\begin{cases}\\frac{n}{2}, &amp; \\text{if $n$ is even} \\\\3n+1, &amp; \\text{if $n$ is odd}\\end{cases}$$ 适配[2ex]1234567$$f(n) = \\begin{cases}\\frac{n}{2}, &amp; \\text{if $n$ is even} \\\\[2ex]3n+1, &amp; \\text{if $n$ is odd}\\end{cases}$$ 不适配[2ex] $$f(n) = \\begin{cases}\\frac{n}{2}, &amp; \\text{if $n$ is even} \\\\3n+1, &amp; \\text{if $n$ is odd}\\end{cases}$$ 适配[2ex] $$f(n) = \\begin{cases}\\frac{n}{2}, &amp; \\text{if $n$ is even} \\\\[2ex]3n+1, &amp; \\text{if $n$ is odd}\\end{cases}$$ 一个 [ex] 指一个 “X-Height”，即x字母高度。可以根据情况指定多个 [ex]，如 [3ex]、[4ex] 等。其实可以在任何地方使用 \\\\[2ex] 语句，只要你觉得合适。 五、数组与表格使用参考数组或表格通常，一个格式化后的表格比单纯的文字或排版后的文字更具有可读性。数组和表格均以 begin{array} 开头，并在其后定义列数及每一列的文本对齐属性，c l r 分别代表居中、左对齐及右对齐。若需要插入垂直分割线，在定义式中插入 | ，若要插入水平分割线，在下一行输入前插入 \\hline 。与矩阵相似，每行元素间均须要插入 &amp; ，每行元素以 \\\\ 结尾，最后以 end{array} 结束数组。使用单个数组或表格时无需声明 $ 或 $$ 符号。 例：：123456789$$\\begin{array}{c|lcr}n &amp; \\text{左对齐} &amp; \\text{居中对齐} &amp; \\text{右对齐} \\\\\\hline1 &amp; 0.24 &amp; 1 &amp; 125 \\\\2 &amp; -1 &amp; 189 &amp; -8 \\\\3 &amp; -20 &amp; 2000 &amp; 1+10i\\end{array}$$ $$\\begin{array}{c|lcr}n &amp; \\text{左对齐} &amp; \\text{居中对齐} &amp; \\text{右对齐} \\\\\\hline1 &amp; 0.24 &amp; 1 &amp; 125 \\\\2 &amp; -1 &amp; 189 &amp; -8 \\\\3 &amp; -20 &amp; 2000 &amp; 1+10i\\end{array}$$ 嵌套的数组或表格多个数组/表格可 互相嵌套 并组成一组数组/一组表格。使用嵌套前必须声明 $$ 符号。 例：：123456789101112131415161718192021222324252627282930313233343536373839$$% outer vertical array of arrays 外层垂直表格\\begin{array}{c} % inner horizontal array of arrays 内层水平表格 \\begin{array}{cc} % inner array of minimum values 内层&quot;最小值&quot;数组 \\begin{array}{c|cccc} \\text{min} &amp; 0 &amp; 1 &amp; 2 &amp; 3\\\\ \\hline 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0\\\\ 1 &amp; 0 &amp; 1 &amp; 1 &amp; 1\\\\ 2 &amp; 0 &amp; 1 &amp; 2 &amp; 2\\\\ 3 &amp; 0 &amp; 1 &amp; 2 &amp; 3 \\end{array} &amp; % inner array of maximum values 内层&quot;最大值&quot;数组 \\begin{array}{c|cccc} \\text{max}&amp;0&amp;1&amp;2&amp;3\\\\ \\hline 0 &amp; 0 &amp; 1 &amp; 2 &amp; 3\\\\ 1 &amp; 1 &amp; 1 &amp; 2 &amp; 3\\\\ 2 &amp; 2 &amp; 2 &amp; 2 &amp; 3\\\\ 3 &amp; 3 &amp; 3 &amp; 3 &amp; 3 \\end{array} \\end{array} % 内层第一行表格组结束 \\\\ % inner array of delta values 内层第二行Delta值数组 \\begin{array}{c|cccc} \\Delta&amp;0&amp;1&amp;2&amp;3\\\\ \\hline 0 &amp; 0 &amp; 1 &amp; 2 &amp; 3\\\\ 1 &amp; 1 &amp; 0 &amp; 1 &amp; 2\\\\ 2 &amp; 2 &amp; 1 &amp; 0 &amp; 1\\\\ 3 &amp; 3 &amp; 2 &amp; 1 &amp; 0 \\end{array} % 内层第二行表格组结束\\end{array}$$ $$\\begin{array}{c} \\begin{array}{cc} \\begin{array}{c|cccc} \\text{min} &amp; 0 &amp; 1 &amp; 2 &amp; 3\\\\ \\hline 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0\\\\ 1 &amp; 0 &amp; 1 &amp; 1 &amp; 1\\\\ 2 &amp; 0 &amp; 1 &amp; 2 &amp; 2\\\\ 3 &amp; 0 &amp; 1 &amp; 2 &amp; 3 \\end{array} &amp; \\begin{array}{c|cccc} \\text{max}&amp;0&amp;1&amp;2&amp;3\\\\ \\hline 0 &amp; 0 &amp; 1 &amp; 2 &amp; 3\\\\ 1 &amp; 1 &amp; 1 &amp; 2 &amp; 3\\\\ 2 &amp; 2 &amp; 2 &amp; 2 &amp; 3\\\\ 3 &amp; 3 &amp; 3 &amp; 3 &amp; 3 \\end{array} \\end{array} \\\\ \\begin{array}{c|cccc} \\Delta&amp;0&amp;1&amp;2&amp;3\\\\ \\hline 0 &amp; 0 &amp; 1 &amp; 2 &amp; 3\\\\ 1 &amp; 1 &amp; 0 &amp; 1 &amp; 2\\\\ 2 &amp; 2 &amp; 1 &amp; 0 &amp; 1\\\\ 3 &amp; 3 &amp; 2 &amp; 1 &amp; 0 \\end{array}\\end{array}$$ 方程组使用 \\begin{array}…\\end{array} 和 \\left\\{…\\right. 来创建一个方程组。 例：：123456789$$\\left\\{ \\begin{array}{c}a_1x+b_1y+c_1z=d_1 \\\\ a_2x+b_2y+c_2z=d_2 \\\\ a_3x+b_3y+c_3z=d_3\\end{array}\\right. $$ $$\\left\\{\\begin{array}{c}a_1x+b_1y+c_1z=d_1 \\\\a_2x+b_2y+c_2z=d_2 \\\\a_3x+b_3y+c_3z=d_3\\end{array}\\right.$$ 或者使用条件表达式组 \\begin{cases}…\\end{cases} 来实现相同效果： 例：：1234567$$\\begin{cases}a_1x+b_1y+c_1z=d_1 \\\\ a_2x+b_2y+c_2z=d_2 \\\\ a_3x+b_3y+c_3z=d_3\\end{cases}$$ $$\\begin{cases}a_1x+b_1y+c_1z=d_1 \\\\a_2x+b_2y+c_2z=d_2 \\\\a_3x+b_3y+c_3z=d_3\\end{cases}$$ 六、连分数使用参考连分式就像输入分式时使用 \\frac 一样，使用 \\cfrac 来创建一个连分数。 例：： 12345$$x = a_0 + \\cfrac{1^2}{a_1 + \\cfrac{2^2}{a_2 + \\cfrac{3^2}{a_3 + \\cfrac{4^4}{a_4 + \\cdots}}}}$$ $$x = a_0 + \\cfrac{1^2}{a_1+ \\cfrac{2^2}{a_2+ \\cfrac{3^2}{a_3 + \\cfrac{4^4}{a_4 + \\cdots}}}}$$ 不要使用普通的 \\frac 或 \\over 来创建，否则会看起来 很恶心 。 反例：： 12345$$x = a_0 + \\frac{1^2}{a_1+ \\frac{2^2}{a_2+ \\frac{3^2}{a_3 + \\frac{4^4}{a_4 + \\cdots}}}}$$ $$x = a_0 + \\frac{1^2}{a_1+ \\frac{2^2}{a_2+ \\frac{3^2}{a_3 + \\frac{4^4}{a_4 + \\cdots}}}}$$ 当然，你可以使用 \\frac 来表达连分数的 紧缩记法 。 例：： 12345$$x = a_0 + \\frac{1^2}{a_1+} \\frac{2^2}{a_2+} \\frac{3^2}{a_3 +} \\frac{4^4}{a_4 +} \\cdots$$ $$x = a_0 + \\frac{1^2}{a_1+}\\frac{2^2}{a_2+}\\frac{3^2}{a_3 +} \\frac{4^4}{a_4 +} \\cdots$$ 连分数通常都太大以至于不易排版，所以建议在连分数前后声明 $$ 符号，或使用像 [a0;a1,a2,a3,…] 一样的紧缩记法。 七、交换图表使用参考交换图表使用一行 $ \\require{AMScd} $ 语句来允许交换图表的显示。声明交换图表后，语法与矩阵相似，在开头使用 begin{CD}，在结尾使用 end{CD}，在中间插入图表元素，每个元素之间插入 &amp; ，并在每行结尾处使用 \\\\ 。 例：： 123456$\\require{AMScd}$\\begin{CD} A @&gt;&gt;&gt; B\\\\ @VVV @VVV\\\\ C @&gt;&gt;&gt; D\\end{CD} $$$\\require{AMScd}$\\begin{CD}A @&gt;&gt;&gt; B\\\\@VVV @VVV\\\\C @&gt;&gt;&gt; D\\end{CD}$$ 其中，@&gt;&gt;&gt; 代表右箭头、@&lt;&lt;&lt; 代表左箭头、@VVV 代表下箭头、@AAA 代表上箭头、@= 代表水平双实线、@| 代表竖直双实线、@.代表没有箭头。在 @&gt;&gt;&gt; 的 &gt;&gt;&gt; 之间任意插入文字即代表该箭头的注释文字。 例：： 1234567$$\\begin{CD} A @&gt;&gt;&gt; B @&gt;{\\text{very long label}}&gt;&gt; C \\\\ @. @AAA @| \\\\ D @= E @&lt;&lt;&lt; F\\end{CD}$$ $$\\begin{CD}A @&gt;&gt;&gt; B @&gt;{\\text{very long label}}&gt;&gt; C \\\\@. @AAA @| \\\\D @= E @&lt;&lt;&lt; F\\end{CD}$$ 在本例中， “very long label”自动延长了它所在箭头以及对应箭头的长度。 八、一些特殊的注意事项 These are issues that won’t affect the correctness of formulas, but might make them look significantly better or worse. Beginners should feel free to ignore this advice; someone else will correct it for them, or more likely nobody will care. 现在指出的小问题并不会影响方程式及公式等的正确显示，但能让它们看起来明显更好看。初学者可无视这些建议，自然会有强迫症患者替你们改掉它的，或者更可能地，根本没人发现这些问题。 Don’t use \\frac in exponents or limits of integrals; it looks bad and can be confusing, which is why it is rarely done in professional mathematical typesetting. Write the fraction horizontally, with a slash. 在以e为底的指数函数、极限和积分中尽量不要使用 \\frac 符号：它会使整段函数看起来很怪，而且可能产生歧义。也正是因此它在专业数学排版中几乎从不出现。横着写这些分式，中间使用斜线间隔 / （用斜线代替分数线）。 例：： 12345678$$\\begin{array}{cc}\\mathrm{Bad} &amp; \\mathrm{Better} \\\\\\hline \\\\e^{i\\frac{\\pi}2} \\quad e^{\\frac{i\\pi}2}&amp; e^{i\\pi/2} \\\\\\int_{-\\frac\\pi2}^\\frac\\pi2 \\sin x\\,dx &amp; \\int_{-\\pi/2}^{\\pi/2}\\sin x\\,dx \\\\\\end{array}$$ $$\\begin{array}{cc}\\mathrm{Bad} &amp; \\mathrm{Better} \\\\\\hline \\\\e^{i\\frac{\\pi}2} \\quad e^{\\frac{i\\pi}2}&amp; e^{i\\pi/2} \\\\\\int_{-\\frac\\pi2}^\\frac\\pi2 \\sin x\\,dx &amp; \\int_{-\\pi/2}^{\\pi/2}\\sin x\\,dx \\\\\\end{array}$$ The | symbol has the wrong spacing when it is used as a divider, for example in set comprehensions. Use \\mid instead. | 符号在被当作分隔符时会产生错误的间隔，因此在需要分隔时最好使用 \\mid 来代替它。 例：： 1234567$$\\begin{array}{cc}\\mathrm{Bad} &amp; \\mathrm{Better} \\\\\\hline \\\\\\{x|x^2\\in\\Bbb Z\\} &amp; \\{x\\mid x^2\\in\\Bbb Z\\} \\\\\\end{array}$$ $$\\begin{array}{cc}\\mathrm{Bad} &amp; \\mathrm{Better} \\\\\\hline \\\\\\{x|x^2\\in\\Bbb Z\\} &amp; \\{x\\mid x^2\\in\\Bbb Z\\} \\\\\\end{array}$$ For double and triple integrals, don’t use \\int\\int or \\int\\int\\int. Instead use the special forms \\iint and \\iiint. 使用多重积分符号时，不要多次使用 \\int 来声明，直接使用 \\iint 来表示 二重积分 ，使用 \\iiint 来表示 三重积分等。对于无限次积分，可以用 \\int \\cdots \\int 表示。 例：： 12345678$$\\begin{array}{cc}\\mathrm{Bad} &amp; \\mathrm{Better} \\\\\\hline \\\\\\int\\int_S f(x)\\,dy\\,dx &amp; \\iint_S f(x)\\,dy\\,dx \\\\\\int\\int\\int_V f(x)\\,dz\\,dy\\,dx &amp; \\iiint_V f(x)\\,dz\\,dy\\,dx\\end{array}$$ $$\\begin{array}{cc}\\mathrm{Bad} &amp; \\mathrm{Better} \\\\\\hline \\\\\\int\\int_S f(x)\\,dy\\,dx &amp; \\iint_S f(x)\\,dy\\,dx \\\\\\int\\int\\int_V f(x)\\,dz\\,dy\\,dx &amp; \\iiint_V f(x)\\,dz\\,dy\\,dx\\end{array}$$ 无限次积分： Use \\,, to insert a thin space before differentials; without this will mash them together. 在微分符号前加入 \\, 来插入一个小的间隔空隙；没有 \\, 符号的话， 将会把不同的微分符号堆在一起。 例：： 1234567$$\\begin{array}{cc}\\mathrm{Bad} &amp; \\mathrm{Better} \\\\\\hline \\\\\\iiint_V f(x){\\rm d}z {\\rm d}y {\\rm d}x &amp; \\iiint_V f(x)\\,{\\rm d}z\\,{\\rm d}y\\,{\\rm d}x\\end{array}$$ $$\\begin{array}{cc}\\mathrm{Bad} &amp; \\mathrm{Better} \\\\\\hline \\\\iiint_V f(x){\\rm d}z {\\rm d}y {\\rm d}x &amp; \\iiint_V f(x)\\,{\\rm d}z\\,{\\rm d}y\\,{\\rm d}x\\end{array}$$ ReferenceCmd Markdown 简明语法手册","link":"/2018/02/26/Write-Markdown-with-Formulas/"}],"tags":[{"name":"Electron","slug":"Electron","link":"/tags/Electron/"},{"name":"BoP2016","slug":"BoP2016","link":"/tags/BoP2016/"},{"name":"Configuration","slug":"Configuration","link":"/tags/Configuration/"},{"name":"WPF","slug":"WPF","link":"/tags/WPF/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"Markdown","slug":"Markdown","link":"/tags/Markdown/"}],"categories":[{"name":"DanmakuPie","slug":"DanmakuPie","link":"/categories/DanmakuPie/"},{"name":"Creative","slug":"Creative","link":"/categories/Creative/"},{"name":"Basic","slug":"Basic","link":"/categories/Basic/"}]}